<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<database name="geologie2" schema="public" type="PostgreSQL - 10.0">
   <sequences>
      <sequence increment="1" name="affleurement_id_seq" startValue="1"/>
      <sequence increment="1" name="commentaire_eg_id_seq" startValue="1"/>
      <sequence increment="1" name="commentaire_id_seq" startValue="1"/>
      <sequence increment="1" name="complement_eg_id_seq" startValue="1"/>
      <sequence increment="1" name="complement_site_id_seq" startValue="1"/>
      <sequence increment="1" name="entite_geol_id_seq" startValue="1"/>
      <sequence increment="1" name="entite_geol_qcm_id_seq" startValue="1"/>
      <sequence increment="1" name="espace_protege_id_seq" startValue="1"/>
      <sequence increment="1" name="groups_id_seq" startValue="1"/>
      <sequence increment="1" name="login_attempts_id_seq" startValue="1"/>
      <sequence increment="1" name="ontology_id_seq" startValue="1017"/>
      <sequence increment="1" name="photo_id_seq" startValue="1"/>
      <sequence increment="1" name="qcm_id_seq" startValue="1"/>
      <sequence increment="1" name="site_id_seq" startValue="1"/>
      <sequence increment="1" name="site_qcm_id_seq" startValue="1"/>
      <sequence increment="1" name="users_groups_id_seq" startValue="1"/>
      <sequence increment="1" name="users_id_seq" startValue="1"/>
   </sequences>
   <tables>
      <table name="affleurement" numRows="9" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('affleurement_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="nom" nullable="false" remarks="" size="150" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="description" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="geom" nullable="true" remarks="" size="2147483647" type="geometry" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="eg_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="affleurement_id_eg_fkey" implied="false" onDeleteCascade="false" schema="public" table="entite_geol"/>
         </column>
         <column autoUpdated="false" defaultValue="'affleurement'::character varying" digits="0" id="5" name="type" nullable="true" remarks="" size="50" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="affleurement_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="idx_affl_id_eg" unique="false">
            <column ascending="true" name="eg_id"/>
         </index>
      </table>
      <table name="commentaire" numRows="2" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('commentaire_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="rubrique" nullable="true" remarks="" size="50" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="commentaire" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="site_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="commentaire_site_id_0219b6c5_fk_site_id" implied="false" onDeleteCascade="true" schema="public" table="site"/>
         </column>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="commentaire_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="commentaire_site_id_0219b6c5" unique="false">
            <column ascending="true" name="site_id"/>
         </index>
      </table>
      <table name="commentaire_eg" numRows="1" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('commentaire_eg_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="rubrique" nullable="true" remarks="" size="50" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="commentaire" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="entite_geol_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="commentaire_eg_entite_geol_id_61a507ba_fk_entite_geol_id" implied="false" onDeleteCascade="false" schema="public" table="entite_geol"/>
         </column>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="commentaire_eg_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="commentaire_eg_entite_geol_id_61a507ba" unique="false">
            <column ascending="true" name="entite_geol_id"/>
         </index>
      </table>
      <table name="complement_eg" numRows="2" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('complement_eg_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="question" nullable="true" remarks="" size="15" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="elements" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="entite_geol_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="complement_eg_entite_geol_id_41b9182f_fk_entite_geol_id" implied="false" onDeleteCascade="false" schema="public" table="entite_geol"/>
         </column>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="complement_eg_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="complement_eg_entite_geol_id_41b9182f" unique="false">
            <column ascending="true" name="entite_geol_id"/>
         </index>
      </table>
      <table name="complement_site" numRows="3" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('complement_site_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="site_id" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="question" nullable="true" remarks="" size="15" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="elements" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="complement_site_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="echelle_geol" numRows="74" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <child column="parent" foreignKey="echelle_geol_parent_4a7d332d_fk_echelle_geol_id" implied="false" onDeleteCascade="false" schema="public" table="echelle_geol"/>
            <child column="ere_geol_id" foreignKey="entite_geol_ere_geol_id_c9a3cb0f_fk_echelle_geol_id" implied="false" onDeleteCascade="false" schema="public" table="entite_geol"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="label" nullable="true" remarks="" size="150" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="parent" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="echelle_geol_parent_4a7d332d_fk_echelle_geol_id" implied="false" onDeleteCascade="false" schema="public" table="echelle_geol"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="date_deb" nullable="true" remarks="" size="131089" type="numeric" typeCode="2"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="date_fin" nullable="true" remarks="" size="131089" type="numeric" typeCode="2"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="echelle_geol_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="echelle_geol_parent_4a7d332d" unique="false">
            <column ascending="true" name="parent"/>
         </index>
      </table>
      <table name="entite_geol" numRows="24" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('entite_geol_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="eg_id" foreignKey="affleurement_id_eg_fkey" implied="false" onDeleteCascade="false" schema="public" table="affleurement"/>
            <child column="entite_geol_id" foreignKey="commentaire_eg_entite_geol_id_61a507ba_fk_entite_geol_id" implied="false" onDeleteCascade="false" schema="public" table="commentaire_eg"/>
            <child column="entite_geol_id" foreignKey="complement_eg_entite_geol_id_41b9182f_fk_entite_geol_id" implied="false" onDeleteCascade="false" schema="public" table="complement_eg"/>
            <child column="entite_geol_id" foreignKey="entite_geol_qcm_entite_geol_id_4a12bcfb_fk_entite_geol_id" implied="false" onDeleteCascade="false" schema="public" table="entite_geol_qcm"/>
            <child column="eg_id" foreignKey="photo_eg_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="photo"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="intitule" nullable="false" remarks="" size="255" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="code" nullable="true" remarks="" size="10" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="quantite_affleurements" nullable="true" remarks="" size="50" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="affleurements_accessibles" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="permeabilite" nullable="true" remarks="" size="50" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="presence_aquifere" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="niveau_sources" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="complements" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="geom" nullable="true" remarks="" size="2147483647" type="geometry" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="ere_geol_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="entite_geol_ere_geol_id_c9a3cb0f_fk_echelle_geol_id" implied="false" onDeleteCascade="false" schema="public" table="echelle_geol"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="site_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="entite_geol_espace_protege_id_952f40c7_fk_site_id" implied="false" onDeleteCascade="true" schema="public" table="site"/>
         </column>
         <column autoUpdated="false" defaultValue="now()" digits="6" id="12" name="last_modified" nullable="false" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="modified_by_userid" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="14" name="nom_carte" nullable="true" remarks="" size="254" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="15" name="s_fgeol_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="ogc_fid" foreignKey="fk_eg_s_fgeol" implied="false" onDeleteCascade="false" schema="infoterre" table="s_fgeol"/>
         </column>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="entite_geol_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="entite_geol_ere_geol_id_c9a3cb0f" unique="false">
            <column ascending="true" name="ere_geol_id"/>
         </index>
         <index name="entite_geol_espace_protege_id_952f40c7" unique="false">
            <column ascending="true" name="site_id"/>
         </index>
         <index name="entite_geol_geom_id" unique="false">
            <column ascending="true" name="geom"/>
         </index>
         <index name="fki_fk_eg_s_fgeol" unique="false">
            <column ascending="true" name="s_fgeol_id"/>
         </index>
      </table>
      <table name="entite_geol_qcm" numRows="34" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('entite_geol_qcm_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="info_complement" nullable="true" remarks="" size="255" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="remarquable" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="entite_geol_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="entite_geol_qcm_entite_geol_id_4a12bcfb_fk_entite_geol_id" implied="false" onDeleteCascade="false" schema="public" table="entite_geol"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="qcm_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="entite_geol_qcm_qcm_id_174eb45a_fk_qcm_id" implied="false" onDeleteCascade="false" schema="public" table="qcm"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="interet_scientifique" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="interet_pedagogique" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="interet_esthetique" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="interet_historique" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="remarquable_info" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="geom" nullable="true" remarks="" size="2147483647" type="jsonb" typeCode="1111"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="entite_geol_qcm_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="entite_geol_qcm_entite_geol_id_4a12bcfb" unique="false">
            <column ascending="true" name="entite_geol_id"/>
         </index>
         <index name="entite_geol_qcm_entite_geol_id_qcm_id_0ff82bff_uniq" unique="true">
            <column ascending="true" name="entite_geol_id"/>
            <column ascending="true" name="qcm_id"/>
         </index>
         <index name="entite_geol_qcm_qcm_id_174eb45a" unique="false">
            <column ascending="true" name="qcm_id"/>
         </index>
      </table>
      <table name="espace_protege" numRows="7" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('espace_protege_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="ep_id" foreignKey="site_ep_id_312a3358_fk_espace_protege_id" implied="false" onDeleteCascade="true" schema="public" table="site"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="code_national_ep" nullable="false" remarks="" size="50" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="nom" nullable="false" remarks="" size="150" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="type" nullable="false" remarks="" size="255" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="sous_type" nullable="true" remarks="" size="255" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="numero" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="6" name="surface" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="geom" nullable="false" remarks="" size="2147483647" type="geometry" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="true" digits="0" id="8" name="monosite" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="group_id" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="espace_protege_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="espace_protege_code_national_ep_55230d25_like" unique="false">
            <column ascending="true" name="code_national_ep"/>
         </index>
         <index name="espace_protege_code_national_ep_key" unique="true">
            <column ascending="true" name="code_national_ep"/>
         </index>
         <index name="espace_protege_geom_id" unique="false">
            <column ascending="true" name="geom"/>
         </index>
      </table>
      <table name="espace_protege_ref" numRows="346" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="geom" nullable="true" remarks="" size="2147483647" type="geometry" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="id_local" nullable="true" remarks="" size="15" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="code_r_enp" nullable="true" remarks="" size="5" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="nom_site" nullable="true" remarks="" size="254" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="date_crea" nullable="true" remarks="" size="13" type="date" typeCode="91"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="modif_adm" nullable="true" remarks="" size="13" type="date" typeCode="91"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="modif_geo" nullable="true" remarks="" size="13" type="date" typeCode="91"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="8" name="surf_off" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="acte_deb" nullable="true" remarks="" size="50" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="acte_fin" nullable="true" remarks="" size="50" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="gest_site" nullable="true" remarks="" size="100" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="12" name="operateur" nullable="true" remarks="" size="50" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="src_geom" nullable="true" remarks="" size="100" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="14" name="src_annee" nullable="true" remarks="" size="4" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="15" name="marin" nullable="true" remarks="" size="1" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="16" name="id_mnhn" nullable="true" remarks="" size="30" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="17" name="gest_site_2" nullable="true" remarks="" size="255" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="18" name="id_rnf" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="19" name="jonction_nom" nullable="true" remarks="" size="12" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="20" name="chemin_acte" nullable="true" remarks="" size="255" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="21" name="outremer" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="espace_protege_ref_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="idx_ep_ref_id_mnhn" unique="false">
            <column ascending="true" name="id_mnhn"/>
         </index>
         <index name="sidx_espace_protege_ref_geog" unique="false">
            <column ascending="true" name="geom"/>
         </index>
      </table>
      <table name="geography_columns" numRows="0" remarks="" schema="public" type="VIEW" viewSql=" SELECT current_database() AS f_table_catalog,&#10;    n.nspname AS f_table_schema,&#10;    c.relname AS f_table_name,&#10;    a.attname AS f_geography_column,&#10;    postgis_typmod_dims(a.atttypmod) AS coord_dimension,&#10;    postgis_typmod_srid(a.atttypmod) AS srid,&#10;    postgis_typmod_type(a.atttypmod) AS type&#10;   FROM pg_class c,&#10;    pg_attribute a,&#10;    pg_type t,&#10;    pg_namespace n&#10;  WHERE ((t.typname = 'geography'::name) AND (a.attisdropped = false) AND (a.atttypid = t.oid) AND (a.attrelid = c.oid) AND (c.relnamespace = n.oid) AND (c.relkind = ANY (ARRAY['r'::&quot;char&quot;, 'v'::&quot;char&quot;, 'm'::&quot;char&quot;, 'f'::&quot;char&quot;, 'p'::&quot;char&quot;])) AND (NOT pg_is_other_temp_schema(c.relnamespace)) AND has_table_privilege(c.oid, 'SELECT'::text));">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="f_table_catalog" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="f_table_schema" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="f_table_name" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="f_geography_column" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="coord_dimension" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="srid" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="srid" foreignKey="Implied Constraint" implied="true" onDeleteCascade="false" schema="public" table="spatial_ref_sys"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="type" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
      </table>
      <table name="geometry_columns" numRows="0" remarks="" schema="public" type="VIEW" viewSql=" SELECT (current_database())::character varying(256) AS f_table_catalog,&#10;    n.nspname AS f_table_schema,&#10;    c.relname AS f_table_name,&#10;    a.attname AS f_geometry_column,&#10;    COALESCE(postgis_typmod_dims(a.atttypmod), sn.ndims, 2) AS coord_dimension,&#10;    COALESCE(NULLIF(postgis_typmod_srid(a.atttypmod), 0), sr.srid, 0) AS srid,&#10;    (replace(replace(COALESCE(NULLIF(upper(postgis_typmod_type(a.atttypmod)), 'GEOMETRY'::text), st.type, 'GEOMETRY'::text), 'ZM'::text, ''::text), 'Z'::text, ''::text))::character varying(30) AS type&#10;   FROM ((((((pg_class c&#10;     JOIN pg_attribute a ON (((a.attrelid = c.oid) AND (NOT a.attisdropped))))&#10;     JOIN pg_namespace n ON ((c.relnamespace = n.oid)))&#10;     JOIN pg_type t ON ((a.atttypid = t.oid)))&#10;     LEFT JOIN ( SELECT s.connamespace,&#10;            s.conrelid,&#10;            s.conkey,&#10;            replace(split_part(s.consrc, ''''::text, 2), ')'::text, ''::text) AS type&#10;           FROM pg_constraint s&#10;          WHERE (s.consrc ~~* '%geometrytype(% = %'::text)) st ON (((st.connamespace = n.oid) AND (st.conrelid = c.oid) AND (a.attnum = ANY (st.conkey)))))&#10;     LEFT JOIN ( SELECT s.connamespace,&#10;            s.conrelid,&#10;            s.conkey,&#10;            (replace(split_part(s.consrc, ' = '::text, 2), ')'::text, ''::text))::integer AS ndims&#10;           FROM pg_constraint s&#10;          WHERE (s.consrc ~~* '%ndims(% = %'::text)) sn ON (((sn.connamespace = n.oid) AND (sn.conrelid = c.oid) AND (a.attnum = ANY (sn.conkey)))))&#10;     LEFT JOIN ( SELECT s.connamespace,&#10;            s.conrelid,&#10;            s.conkey,&#10;            (replace(replace(split_part(s.consrc, ' = '::text, 2), ')'::text, ''::text), '('::text, ''::text))::integer AS srid&#10;           FROM pg_constraint s&#10;          WHERE (s.consrc ~~* '%srid(% = %'::text)) sr ON (((sr.connamespace = n.oid) AND (sr.conrelid = c.oid) AND (a.attnum = ANY (sr.conkey)))))&#10;  WHERE ((c.relkind = ANY (ARRAY['r'::&quot;char&quot;, 'v'::&quot;char&quot;, 'm'::&quot;char&quot;, 'f'::&quot;char&quot;, 'p'::&quot;char&quot;])) AND (NOT (c.relname = 'raster_columns'::name)) AND (t.typname = 'geometry'::name) AND (NOT pg_is_other_temp_schema(c.relnamespace)) AND has_table_privilege(c.oid, 'SELECT'::text));">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="f_table_catalog" nullable="true" remarks="" size="256" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="f_table_schema" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="f_table_name" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="f_geometry_column" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="coord_dimension" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="srid" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="srid" foreignKey="Implied Constraint" implied="true" onDeleteCascade="false" schema="public" table="spatial_ref_sys"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="type" nullable="true" remarks="" size="30" type="varchar" typeCode="12"/>
      </table>
      <table name="groups" numRows="6" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('groups_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="false" remarks="" size="20" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="description" nullable="false" remarks="" size="100" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="groups_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <checkConstraint constraint="((id &gt;= 0))" name="check_id"/>
      </table>
      <table name="login_attempts" numRows="0" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('login_attempts_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="ip_address" nullable="true" remarks="" size="45" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="login" nullable="false" remarks="" size="100" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="time" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="login_attempts_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <checkConstraint constraint="((id &gt;= 0))" name="check_id"/>
      </table>
      <table name="ontology" numRows="1021" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('ontology_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="id_parent" foreignKey="fk_ontology_parent" implied="false" onDeleteCascade="false" schema="public" table="ontology"/>
            <child column="qcm_id" foreignKey="site_ontology_qcm_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="site_ontology"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="label" nullable="true" remarks="" size="255" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="definition" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="id_parent" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="fk_ontology_parent" implied="false" onDeleteCascade="false" schema="public" table="ontology"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="description" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="5" name="checkable" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="6" name="nullying" nullable="false" remarks="permet de désactiver tous les frères et soeurs" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="class" nullable="true" remarks="" size="124" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="attached_to" nullable="true" remarks="" size="124" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="ontology_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="fki_fk_ontology_parent" unique="false">
            <column ascending="true" name="id_parent"/>
         </index>
      </table>
      <table name="photo" numRows="10" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('photo_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="url" nullable="false" remarks="" size="255" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="description" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="site_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="photo_site_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="site"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="eg_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="photo_eg_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="entite_geol"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="mimetype" nullable="true" remarks="" size="50" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="photo_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="idx_fk_photo_eg" unique="false">
            <column ascending="true" name="eg_id"/>
         </index>
         <index name="idx_fk_photo_site" unique="false">
            <column ascending="true" name="site_id"/>
         </index>
         <index name="idx_photo_mimetype" unique="false">
            <column ascending="true" name="mimetype"/>
         </index>
      </table>
      <table name="qcm" numRows="1012" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('qcm_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="qcm_id" foreignKey="entite_geol_qcm_qcm_id_174eb45a_fk_qcm_id" implied="false" onDeleteCascade="false" schema="public" table="entite_geol_qcm"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="question" nullable="false" remarks="" size="10" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="label" nullable="false" remarks="" size="255" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="description" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="ordre_par_question" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="hierarchie" nullable="true" remarks="" size="255" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="rubrique" nullable="true" remarks="" size="100" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="page_dico" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="intitule_complement" nullable="true" remarks="" size="45" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="parent" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="qcm_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="idx_qcm_question" unique="false">
            <column ascending="true" name="question"/>
         </index>
         <index name="idx_qcm_rubrique" unique="false">
            <column ascending="true" name="rubrique"/>
         </index>
      </table>
      <table name="raster_columns" numRows="0" remarks="" schema="public" type="VIEW" viewSql=" SELECT current_database() AS r_table_catalog,&#10;    n.nspname AS r_table_schema,&#10;    c.relname AS r_table_name,&#10;    a.attname AS r_raster_column,&#10;    COALESCE(_raster_constraint_info_srid(n.nspname, c.relname, a.attname), ( SELECT st_srid('010100000000000000000000000000000000000000'::geometry) AS st_srid)) AS srid,&#10;    _raster_constraint_info_scale(n.nspname, c.relname, a.attname, 'x'::bpchar) AS scale_x,&#10;    _raster_constraint_info_scale(n.nspname, c.relname, a.attname, 'y'::bpchar) AS scale_y,&#10;    _raster_constraint_info_blocksize(n.nspname, c.relname, a.attname, 'width'::text) AS blocksize_x,&#10;    _raster_constraint_info_blocksize(n.nspname, c.relname, a.attname, 'height'::text) AS blocksize_y,&#10;    COALESCE(_raster_constraint_info_alignment(n.nspname, c.relname, a.attname), false) AS same_alignment,&#10;    COALESCE(_raster_constraint_info_regular_blocking(n.nspname, c.relname, a.attname), false) AS regular_blocking,&#10;    _raster_constraint_info_num_bands(n.nspname, c.relname, a.attname) AS num_bands,&#10;    _raster_constraint_info_pixel_types(n.nspname, c.relname, a.attname) AS pixel_types,&#10;    _raster_constraint_info_nodata_values(n.nspname, c.relname, a.attname) AS nodata_values,&#10;    _raster_constraint_info_out_db(n.nspname, c.relname, a.attname) AS out_db,&#10;    _raster_constraint_info_extent(n.nspname, c.relname, a.attname) AS extent,&#10;    COALESCE(_raster_constraint_info_index(n.nspname, c.relname, a.attname), false) AS spatial_index&#10;   FROM pg_class c,&#10;    pg_attribute a,&#10;    pg_type t,&#10;    pg_namespace n&#10;  WHERE ((t.typname = 'raster'::name) AND (a.attisdropped = false) AND (a.atttypid = t.oid) AND (a.attrelid = c.oid) AND (c.relnamespace = n.oid) AND (c.relkind = ANY (ARRAY['r'::&quot;char&quot;, 'v'::&quot;char&quot;, 'm'::&quot;char&quot;, 'f'::&quot;char&quot;, 'p'::&quot;char&quot;])) AND (NOT pg_is_other_temp_schema(c.relnamespace)) AND has_table_privilege(c.oid, 'SELECT'::text));">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="r_table_catalog" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="r_table_schema" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="r_table_name" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="r_raster_column" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="srid" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="srid" foreignKey="Implied Constraint" implied="true" onDeleteCascade="false" schema="public" table="spatial_ref_sys"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="17" id="5" name="scale_x" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="6" name="scale_y" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="blocksize_x" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="blocksize_y" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="same_alignment" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="regular_blocking" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="num_bands" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="12" name="pixel_types" nullable="true" remarks="" size="2147483647" type="_text" typeCode="2003"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="13" name="nodata_values" nullable="true" remarks="" size="17" type="_float8" typeCode="2003"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="14" name="out_db" nullable="true" remarks="" size="1" type="_bool" typeCode="2003"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="15" name="extent" nullable="true" remarks="" size="2147483647" type="geometry" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="16" name="spatial_index" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
      </table>
      <table name="raster_overviews" numRows="0" remarks="" schema="public" type="VIEW" viewSql=" SELECT current_database() AS o_table_catalog,&#10;    n.nspname AS o_table_schema,&#10;    c.relname AS o_table_name,&#10;    a.attname AS o_raster_column,&#10;    current_database() AS r_table_catalog,&#10;    (split_part(split_part(s.consrc, '''::name'::text, 1), ''''::text, 2))::name AS r_table_schema,&#10;    (split_part(split_part(s.consrc, '''::name'::text, 2), ''''::text, 2))::name AS r_table_name,&#10;    (split_part(split_part(s.consrc, '''::name'::text, 3), ''''::text, 2))::name AS r_raster_column,&#10;    (btrim(split_part(s.consrc, ','::text, 2)))::integer AS overview_factor&#10;   FROM pg_class c,&#10;    pg_attribute a,&#10;    pg_type t,&#10;    pg_namespace n,&#10;    pg_constraint s&#10;  WHERE ((t.typname = 'raster'::name) AND (a.attisdropped = false) AND (a.atttypid = t.oid) AND (a.attrelid = c.oid) AND (c.relnamespace = n.oid) AND ((c.relkind)::text = ANY ((ARRAY['r'::character(1), 'v'::character(1), 'm'::character(1), 'f'::character(1)])::text[])) AND (s.connamespace = n.oid) AND (s.conrelid = c.oid) AND (s.consrc ~~ '%_overview_constraint(%'::text) AND (NOT pg_is_other_temp_schema(c.relnamespace)) AND has_table_privilege(c.oid, 'SELECT'::text));">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="o_table_catalog" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="o_table_schema" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="o_table_name" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="o_raster_column" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="r_table_catalog" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="r_table_schema" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="r_table_name" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="r_raster_column" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="overview_factor" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
      </table>
      <table name="rubrique" numRows="20" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="id" nullable="false" remarks="" size="100" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="description" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="obligatoire" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="niveau" nullable="true" remarks="" size="50" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="rubrique_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="site" numRows="10" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('site_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="site_id" foreignKey="commentaire_site_id_0219b6c5_fk_site_id" implied="false" onDeleteCascade="true" schema="public" table="commentaire"/>
            <child column="site_id" foreignKey="entite_geol_espace_protege_id_952f40c7_fk_site_id" implied="false" onDeleteCascade="true" schema="public" table="entite_geol"/>
            <child column="site_id" foreignKey="photo_site_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="photo"/>
            <child column="site_id" foreignKey="site_ontology_site_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="site_ontology"/>
            <child column="site_id" foreignKey="site_qcm_site_id_c3752863_fk_site_id" implied="false" onDeleteCascade="true" schema="public" table="site_qcm"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="nom" nullable="false" remarks="" size="255" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="2" name="altitude_max" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="3" name="altitude_min" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="bassin_hydro_general" nullable="true" remarks="" size="255" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="bassin_hydro_rapproche" nullable="true" remarks="" size="255" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="observations_in_situ" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="liste_docs_geol" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="autres_cartes_geol" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="statut_validation" nullable="true" remarks="" size="20" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="geom" nullable="true" remarks="" size="2147483647" type="geometry" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="ep_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="site_ep_id_312a3358_fk_espace_protege_id" implied="false" onDeleteCascade="true" schema="public" table="espace_protege"/>
         </column>
         <column autoUpdated="false" defaultValue="now()" digits="6" id="12" name="last_modified" nullable="false" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="modified_by_userid" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="site_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="site_ep_id_312a3358" unique="false">
            <column ascending="true" name="ep_id"/>
         </index>
         <index name="site_geom_id" unique="false">
            <column ascending="true" name="geom"/>
         </index>
      </table>
      <table name="site_ontology" numRows="24" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="info_complement" nullable="true" remarks="" size="255" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="remarquable" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="qcm_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="site_ontology_qcm_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="ontology"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="site_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="site_ontology_site_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="site"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="interet_scientifique" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="interet_pedagogique" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="interet_esthetique" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="interet_historique" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="remarquable_info" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <primaryKey column="qcm_id" sequenceNumberInPK="1"/>
         <primaryKey column="site_id" sequenceNumberInPK="2"/>
         <index name="site_ontology_pkey" unique="true">
            <column ascending="true" name="qcm_id"/>
            <column ascending="true" name="site_id"/>
         </index>
         <index name="idx_fk_site_ontology_ontology" unique="false">
            <column ascending="true" name="qcm_id"/>
         </index>
         <index name="idx_fk_site_ontology_site" unique="false">
            <column ascending="true" name="site_id"/>
         </index>
      </table>
      <table name="site_qcm" numRows="40" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('site_qcm_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="info_complement" nullable="true" remarks="" size="255" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="remarquable" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="qcm_id" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="site_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="site_qcm_site_id_c3752863_fk_site_id" implied="false" onDeleteCascade="true" schema="public" table="site"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="interet_scientifique" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="interet_pedagogique" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="interet_esthetique" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="interet_historique" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="remarquable_info" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="geom" nullable="true" remarks="" size="2147483647" type="jsonb" typeCode="1111"/>
         <primaryKey column="qcm_id" sequenceNumberInPK="1"/>
         <primaryKey column="site_id" sequenceNumberInPK="2"/>
         <index name="pk_site_qcm" unique="true">
            <column ascending="true" name="qcm_id"/>
            <column ascending="true" name="site_id"/>
         </index>
         <index name="site_qcm_qcm_id_a7bdb38f" unique="false">
            <column ascending="true" name="qcm_id"/>
         </index>
         <index name="site_qcm_site_id_c3752863" unique="false">
            <column ascending="true" name="site_id"/>
         </index>
      </table>
      <table name="spatial_ref_sys" numRows="5536" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="srid" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <child column="srid" foreignKey="Implied Constraint" implied="true" onDeleteCascade="false" schema="public" table="geography_columns"/>
            <child column="srid" foreignKey="Implied Constraint" implied="true" onDeleteCascade="false" schema="public" table="geometry_columns"/>
            <child column="srid" foreignKey="Implied Constraint" implied="true" onDeleteCascade="false" schema="public" table="raster_columns"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="auth_name" nullable="true" remarks="" size="256" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="auth_srid" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="srtext" nullable="true" remarks="" size="2048" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="proj4text" nullable="true" remarks="" size="2048" type="varchar" typeCode="12"/>
         <primaryKey column="srid" sequenceNumberInPK="1"/>
         <index name="spatial_ref_sys_pkey" unique="true">
            <column ascending="true" name="srid"/>
         </index>
         <checkConstraint constraint="(((srid &gt; 0) AND (srid &lt;= 998999)))" name="spatial_ref_sys_srid_check"/>
      </table>
      <table name="users" numRows="4" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('users_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="ip_address" nullable="true" remarks="" size="45" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="username" nullable="true" remarks="" size="100" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="password" nullable="false" remarks="" size="255" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="salt" nullable="true" remarks="" size="255" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="email" nullable="false" remarks="" size="254" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="activation_code" nullable="true" remarks="" size="40" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="forgotten_password_code" nullable="true" remarks="" size="40" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="forgotten_password_time" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="remember_code" nullable="true" remarks="" size="40" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="created_on" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="last_login" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="12" name="active" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="first_name" nullable="true" remarks="" size="50" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="14" name="last_name" nullable="true" remarks="" size="50" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="15" name="company" nullable="true" remarks="" size="100" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="16" name="phone" nullable="true" remarks="" size="20" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="users_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <checkConstraint constraint="((active &gt;= 0))" name="check_active"/>
         <checkConstraint constraint="((id &gt;= 0))" name="check_id"/>
      </table>
      <table name="users_groups" numRows="11" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('users_groups_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="user_id" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="group_id" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="users_groups_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="uc_users_groups" unique="true">
            <column ascending="true" name="user_id"/>
            <column ascending="true" name="group_id"/>
         </index>
         <checkConstraint constraint="((group_id &gt;= 0))" name="users_groups_check_group_id"/>
         <checkConstraint constraint="((id &gt;= 0))" name="users_groups_check_id"/>
         <checkConstraint constraint="((user_id &gt;= 0))" name="users_groups_check_user_id"/>
      </table>
   </tables>
   <routines>
      <routine dataAccess="MODIFIES" deterministic="true" name="__st_countagg_transfn" returnType="agg_count" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		_count bigint;
		rtn_agg agg_count;
	BEGIN

		-- only process parameter args once
		IF agg IS NULL THEN
			rtn_agg.count := 0;

			IF nband < 1 THEN
				RAISE EXCEPTION 'Band index must be greater than zero (1-based)';
			ELSE
				rtn_agg.nband := nband;
			END IF;

			IF exclude_nodata_value IS FALSE THEN
				rtn_agg.exclude_nodata_value := FALSE;
			ELSE
				rtn_agg.exclude_nodata_value := TRUE;
			END IF;

			IF sample_percent < 0. OR sample_percent > 1. THEN
				RAISE EXCEPTION 'Sample percent must be between zero and one';
			ELSE
				rtn_agg.sample_percent := sample_percent;
			END IF;
		ELSE
			rtn_agg := agg;
		END IF;

		IF rast IS NOT NULL THEN
			IF rtn_agg.exclude_nodata_value IS FALSE THEN
				SELECT width * height INTO _count FROM public.ST_Metadata(rast);
			ELSE
				SELECT count INTO _count FROM public._ST_summarystats(
					rast,
				 	rtn_agg.nband, rtn_agg.exclude_nodata_value,
					rtn_agg.sample_percent
				);
			END IF;
		END IF;

		rtn_agg.count := rtn_agg.count + _count;
		RETURN rtn_agg;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_overview_constraint" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		fqtn text;
		cn name;
		sql text;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_overview_' || $3;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK ( public._overview_constraint(' || quote_ident($3)
			|| ',' || $7
			|| ',' || quote_literal($4)
			|| ',' || quote_literal($5)
			|| ',' || quote_literal($6)
			|| '))';

		RETURN  public._add_raster_constraint(cn, sql);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	BEGIN
		BEGIN
			EXECUTE sql;
		EXCEPTION
			WHEN duplicate_object THEN
				RAISE NOTICE 'The constraint "%" already exists.  To replace the existing constraint, delete the constraint and call ApplyRasterConstraints again', cn;
			WHEN OTHERS THEN
				RAISE NOTICE 'Unable to add constraint: %', cn;
				RAISE NOTICE 'SQL used for failed constraint: %', sql;
				RAISE NOTICE 'Returned error message: % (%)', SQLERRM, SQLSTATE;
				RETURN FALSE;
		END;

		RETURN TRUE;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint_alignment" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr text;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_same_alignment_' || $3;

		sql := 'SELECT public.st_makeemptyraster(1, 1, upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid) FROM public.st_metadata((SELECT '
			|| quote_ident($3)
			|| ' FROM ' || fqtn || ' LIMIT 1))';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the alignment of a sample raster: % (%)',
        SQLERRM, SQLSTATE;
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn ||
			' ADD CONSTRAINT ' || quote_ident(cn) ||
			' CHECK (st_samealignment(' || quote_ident($3) || ', ''' || attr || '''::raster))';
		RETURN  public._add_raster_constraint(cn, sql);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint_blocksize" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attrset integer[];
		attr integer;
	BEGIN
		IF lower($4) != 'width' AND lower($4) != 'height' THEN
			RAISE EXCEPTION 'axis must be either "width" or "height"';
			RETURN FALSE;
		END IF;

		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_' || $4 || '_' || $3;

		sql := 'SELECT st_' || $4 || '('
			|| quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' GROUP BY 1 ORDER BY count(*) DESC';
		BEGIN
			attrset := ARRAY[]::integer[];
			FOR attr IN EXECUTE sql LOOP
				attrset := attrset || attr;
			END LOOP;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the % of a sample raster: % (%)',
        $4, SQLERRM, SQLSTATE;
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_' || $4 || '('
			|| quote_ident($3)
			|| ') IN (' || array_to_string(attrset, ',') || '))';
		RETURN  public._add_raster_constraint(cn, sql);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint_coverage_tile" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		fqtn text;
		cn name;
		sql text;

		_scalex double precision;
		_scaley double precision;
		_skewx double precision;
		_skewy double precision;
		_tilewidth integer;
		_tileheight integer;
		_alignment boolean;

		_covextent geometry;
		_covrast raster;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_coverage_tile_' || $3;

		-- metadata
		BEGIN
			sql := 'WITH foo AS (SELECT public.ST_Metadata(' || quote_ident($3) || ') AS meta, public.ST_ConvexHull(' || quote_ident($3) || ') AS hull FROM ' || fqtn || ') SELECT max((meta).scalex), max((meta).scaley), max((meta).skewx), max((meta).skewy), max((meta).width), max((meta).height), public.ST_Union(hull) FROM foo';
			EXECUTE sql INTO _scalex, _scaley, _skewx, _skewy, _tilewidth, _tileheight, _covextent;
		EXCEPTION WHEN OTHERS THEN
			RAISE DEBUG 'Unable to get coverage metadata for %.%: % (%)',
        fqtn, quote_ident($3), SQLERRM, SQLSTATE;
      -- TODO: Why not return false here ?
		END;

		-- rasterize extent
		BEGIN
			_covrast := public.ST_AsRaster(_covextent, _scalex, _scaley, '8BUI', 1, 0, NULL, NULL, _skewx, _skewy);
			IF _covrast IS NULL THEN
				RAISE NOTICE 'Unable to create coverage raster. Cannot add coverage tile constraint: % (%)',
          SQLERRM, SQLSTATE;
				RETURN FALSE;
			END IF;

			-- remove band
			_covrast := ST_MakeEmptyRaster(_covrast);
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to create coverage raster. Cannot add coverage tile constraint: % (%)',
        SQLERRM, SQLSTATE;
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn ||
			' ADD CONSTRAINT ' || quote_ident(cn) ||
			' CHECK (st_iscoveragetile(' || quote_ident($3) || ', ''' || _covrast || '''::raster, ' || _tilewidth || ', ' || _tileheight || '))';
		RETURN  public._add_raster_constraint(cn, sql);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint_extent" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr text; srid integer;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		sql := 'SELECT public.ST_SRID('
            || quote_ident($3)
      || ') FROM '
            || fqtn
            || ' LIMIT 1;';
    EXECUTE sql INTO srid;

		cn := 'enforce_max_extent_' || $3;

		sql := 'SELECT public.st_ashexewkb( public.st_setsrid( public.st_extent( public.st_envelope('
			|| quote_ident($3)
			|| ')), ' || srid || ')) FROM '
			|| fqtn;
		EXECUTE sql INTO attr;

		-- NOTE: I put NOT VALID to prevent the costly step of validating the constraint
		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK ( public.st_envelope('
			|| quote_ident($3)
			|| ') @ ''' || attr || '''::geometry) NOT VALID';
		RETURN  public._add_raster_constraint(cn, sql);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint_nodata_values" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr numeric[];
		max int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_nodata_values_' || $3;

		sql := 'SELECT public._raster_constraint_nodata_values(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the nodata values of a sample raster: % (%)',
        SQLERRM, SQLSTATE;
			RETURN FALSE;
		END;
		max := array_length(attr, 1);
		IF max < 1 OR max IS NULL THEN
			RAISE NOTICE 'Unable to get the nodata values of a sample raster (max < 1 or null)';
			RETURN FALSE;
		END IF;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (_raster_constraint_nodata_values(' || quote_ident($3)
			|| ')::numeric[] = ''{';
		FOR x in 1..max LOOP
			IF attr[x] IS NULL THEN
				sql := sql || 'NULL';
			ELSE
				sql := sql || attr[x];
			END IF;
			IF x < max THEN
				sql := sql || ',';
			END IF;
		END LOOP;
		sql := sql || '}''::numeric[])';

		RETURN  public._add_raster_constraint(cn, sql);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint_num_bands" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_num_bands_' || $3;

		sql := 'SELECT public.st_numbands(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the number of bands of a sample raster: % (%)',
        SQLERRM, SQLSTATE;
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (public.st_numbands(' || quote_ident($3)
			|| ') = ' || attr
			|| ')';
		RETURN  public._add_raster_constraint(cn, sql);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint_out_db" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr boolean[];
		max int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_out_db_' || $3;

		sql := 'SELECT public._raster_constraint_out_db(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the out-of-database bands of a sample raster: % (%)',
        SQLERRM, SQLSTATE;
			RETURN FALSE;
		END;
		max := array_length(attr, 1);
		IF max < 1 OR max IS NULL THEN
			RAISE NOTICE 'Unable to get the out-of-database bands of a sample raster (max < 1 or null)';
			RETURN FALSE;
		END IF;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK ( public._raster_constraint_out_db(' || quote_ident($3)
			|| ') = ''{';
		FOR x in 1..max LOOP
			IF attr[x] IS FALSE THEN
				sql := sql || 'FALSE';
			ELSE
				sql := sql || 'TRUE';
			END IF;
			IF x < max THEN
				sql := sql || ',';
			END IF;
		END LOOP;
		sql := sql || '}''::boolean[])';

		RETURN  public._add_raster_constraint(cn, sql);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint_pixel_types" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr text[];
		max int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_pixel_types_' || $3;

		sql := 'SELECT public._raster_constraint_pixel_types(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the pixel types of a sample raster: % (%)',
        SQLERRM, SQLSTATE;
			RETURN FALSE;
		END;
		max := array_length(attr, 1);
		IF max < 1 OR max IS NULL THEN
			RAISE NOTICE 'Unable to get the pixel types of a sample raster (max < 1 or null)';
			RETURN FALSE;
		END IF;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (_raster_constraint_pixel_types(' || quote_ident($3)
			|| ') = ''{';
		FOR x in 1..max LOOP
			sql := sql || '"' || attr[x] || '"';
			IF x < max THEN
				sql := sql || ',';
			END IF;
		END LOOP;
		sql := sql || '}''::text[])';

		RETURN  public._add_raster_constraint(cn, sql);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint_scale" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr double precision;
	BEGIN
		IF lower($4) != 'x' AND lower($4) != 'y' THEN
			RAISE EXCEPTION 'axis must be either "x" or "y"';
			RETURN FALSE;
		END IF;

		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_scale' || $4 || '_' || $3;

		sql := 'SELECT st_scale' || $4 || '('
			|| quote_ident($3)
			|| ') FROM '
			|| fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the %-scale of a sample raster: % (%)',
        upper($4), SQLERRM, SQLSTATE;
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (round(st_scale' || $4 || '('
			|| quote_ident($3)
			|| ')::numeric, 10) = round(' || text(attr) || '::numeric, 10))';
		RETURN  public._add_raster_constraint(cn, sql);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint_spatially_unique" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr text;
		meta record;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_spatially_unique_' || quote_ident($2) || '_'|| $3;

		sql := 'ALTER TABLE ' || fqtn ||
			' ADD CONSTRAINT ' || quote_ident(cn) ||
			' EXCLUDE ((' || quote_ident($3) || '::geometry) WITH =)';
		RETURN  public._add_raster_constraint(cn, sql);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint_srid" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_srid_' || $3;

		sql := 'SELECT st_srid('
			|| quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the SRID of a sample raster: % (%)',
        SQLERRM, SQLSTATE;
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_srid('
			|| quote_ident($3)
			|| ') = ' || attr || ')';

		RETURN  public._add_raster_constraint(cn, sql);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_overview_constraint" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT  public._drop_raster_constraint($1, $2, 'enforce_overview_' || $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		fqtn text;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		BEGIN
			EXECUTE 'ALTER TABLE '
				|| fqtn
				|| ' DROP CONSTRAINT '
				|| quote_ident(cn);
			RETURN TRUE;
		EXCEPTION
			WHEN undefined_object THEN
				RAISE NOTICE 'The constraint "%" does not exist.  Skipping', cn;
			WHEN OTHERS THEN
				RAISE NOTICE 'Unable to drop constraint "%": % (%)',
          cn, SQLERRM, SQLSTATE;
				RETURN FALSE;
		END;

		RETURN TRUE;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_alignment" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT  public._drop_raster_constraint($1, $2, 'enforce_same_alignment_' || $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_blocksize" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	BEGIN
		IF lower($4) != 'width' AND lower($4) != 'height' THEN
			RAISE EXCEPTION 'axis must be either "width" or "height"';
			RETURN FALSE;
		END IF;

		RETURN  public._drop_raster_constraint($1, $2, 'enforce_' || $4 || '_' || $3);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_coverage_tile" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT  public._drop_raster_constraint($1, $2, 'enforce_coverage_tile_' || $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_extent" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT  public._drop_raster_constraint($1, $2, 'enforce_max_extent_' || $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_nodata_values" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT  public._drop_raster_constraint($1, $2, 'enforce_nodata_values_' || $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_num_bands" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT  public._drop_raster_constraint($1, $2, 'enforce_num_bands_' || $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_out_db" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT  public._drop_raster_constraint($1, $2, 'enforce_out_db_' || $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_pixel_types" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT  public._drop_raster_constraint($1, $2, 'enforce_pixel_types_' || $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_regular_blocking" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._drop_raster_constraint($1, $2, 'enforce_regular_blocking_' || $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_scale" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	BEGIN
		IF lower($4) != 'x' AND lower($4) != 'y' THEN
			RAISE EXCEPTION 'axis must be either "x" or "y"';
			RETURN FALSE;
		END IF;

		RETURN  public._drop_raster_constraint($1, $2, 'enforce_scale' || $4 || '_' || $3);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_spatially_unique" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		cn text;
	BEGIN
		SELECT
			s.conname INTO cn
		FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s, pg_index idx, pg_operator op
		WHERE n.nspname = $1
			AND c.relname = $2
			AND a.attname = $3
			AND a.attrelid = c.oid
			AND s.connamespace = n.oid
			AND s.conrelid = c.oid
			AND s.contype = 'x'
			AND 0::smallint = ANY (s.conkey)
			AND idx.indexrelid = s.conindid
			AND pg_get_indexdef(idx.indexrelid, 1, true) LIKE '(' || quote_ident($3) || '::geometry)'
			AND s.conexclop[1] = op.oid
			AND op.oprname = '=';

		RETURN  public._drop_raster_constraint($1, $2, cn);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_srid" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT  public._drop_raster_constraint($1, $2, 'enforce_srid_' || $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_overview_constraint" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT COALESCE((SELECT TRUE FROM public.raster_columns WHERE r_table_catalog = current_database() AND r_table_schema = $3 AND r_table_name = $4 AND r_raster_column = $5), FALSE) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_overview_constraint_info" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT
		split_part(split_part(s.consrc, '''::name', 1), '''', 2)::name,
		split_part(split_part(s.consrc, '''::name', 2), '''', 2)::name,
		split_part(split_part(s.consrc, '''::name', 3), '''', 2)::name,
		trim(both from split_part(s.consrc, ',', 2))::integer
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_overview_constraint(%'
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_postgis_deprecate" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
DECLARE
  curver_text text;
BEGIN
  --
  -- Raises a NOTICE if it was deprecated in this version,
  -- a WARNING if in a previous version (only up to minor version checked)
  --
    curver_text := '2.4.1';
    IF split_part(curver_text,'.',1)::int > split_part(version,'.',1)::int OR
       ( split_part(curver_text,'.',1) = split_part(version,'.',1) AND
         split_part(curver_text,'.',2) != split_part(version,'.',2) )
    THEN
      RAISE WARNING '% signature was deprecated in %. Please use %', oldname, version, newname;
    ELSE
      RAISE DEBUG '% signature was deprecated in %. Please use %', oldname, version, newname;
    END IF;
END;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_postgis_join_selectivity" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[_postgis_gserialized_joinsel]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_postgis_pgsql_version" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT CASE WHEN split_part(s,'.',1)::integer > 9 THEN split_part(s,'.',1) || '0' ELSE split_part(s,'.', 1) || split_part(s,'.', 2) END AS v
	FROM substring(version(), 'PostgreSQL ([0-9\.]+)') AS s;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_postgis_scripts_pgsql_version" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[SELECT '100'::text AS version]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_postgis_selectivity" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[_postgis_gserialized_sel]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_postgis_stats" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[_postgis_gserialized_stats]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_alignment" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT
		TRUE
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_samealignment(%';
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_blocksize" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT
		CASE
			WHEN strpos(s.consrc, 'ANY (ARRAY[') > 0 THEN
				split_part((substring(s.consrc FROM E'ARRAY\\[(.*?){1}\\]')), ',', 1)::integer
			ELSE
				regexp_replace(
					split_part(s.consrc, '= ', 2),
					'[\(\)]', '', 'g'
				)::integer
			END
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_' || $4 || '(%= %';
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_coverage_tile" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT
		TRUE
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_iscoveragetile(%';
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_extent" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT
		trim(both '''' from split_part(trim(split_part(s.consrc, ' @ ', 2)), '::', 1))::geometry
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_envelope(% @ %';
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_index" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
		SELECT
			TRUE
		FROM pg_catalog.pg_class c
		JOIN pg_catalog.pg_index i
			ON i.indexrelid = c.oid
		JOIN pg_catalog.pg_class c2
			ON i.indrelid = c2.oid
		JOIN pg_catalog.pg_namespace n
			ON n.oid = c.relnamespace
		JOIN pg_am am
			ON c.relam = am.oid
		JOIN pg_attribute att
			ON att.attrelid = c2.oid
				AND pg_catalog.format_type(att.atttypid, att.atttypmod) = 'raster'
		WHERE c.relkind IN ('i')
			AND n.nspname = $1
			AND c2.relname = $2
			AND att.attname = $3
			AND am.amname = 'gist'
			AND strpos(pg_catalog.pg_get_expr(i.indexprs, i.indrelid), att.attname) > 0;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_nodata_values" returnType="ARRAY" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT
		trim(both '''' from
			split_part(
				regexp_replace(
					split_part(s.consrc, ' = ', 2),
					'[\(\)]', '', 'g'
				),
				'::', 1
			)
		)::double precision[]
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_raster_constraint_nodata_values(%';
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_num_bands" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT
		regexp_replace(
			split_part(s.consrc, ' = ', 2),
			'[\(\)]', '', 'g'
		)::integer
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_numbands(%';
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_out_db" returnType="ARRAY" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT
		trim(
			both '''' from split_part(
				regexp_replace(
					split_part(s.consrc, ' = ', 2),
					'[\(\)]', '', 'g'
				),
				'::', 1
			)
		)::boolean[]
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_raster_constraint_out_db(%';
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_pixel_types" returnType="ARRAY" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT
		trim(
			both '''' from split_part(
				regexp_replace(
					split_part(s.consrc, ' = ', 2),
					'[\(\)]', '', 'g'
				),
				'::', 1
			)
		)::text[]
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_raster_constraint_pixel_types(%';
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_regular_blocking" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		covtile boolean;
		spunique boolean;
	BEGIN
		-- check existance of constraints
		-- coverage tile constraint
		covtile := COALESCE( public._raster_constraint_info_coverage_tile($1, $2, $3), FALSE);

		-- spatially unique constraint
		spunique := COALESCE( public._raster_constraint_info_spatially_unique($1, $2, $3), FALSE);

		RETURN (covtile AND spunique);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_scale" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	WITH c AS (SELECT
		regexp_replace(
			replace(
				split_part(
					split_part(s.consrc, ' = ', 2),
					'::', 1
				),
				'round(', ''
			),
			'[ ''''\(\)]', '', 'g'
		)::text AS val
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_scale' || $4 || '(% = %')
-- if it is a comma separated list of two numbers then need to use round
   SELECT CASE WHEN split_part(c.val,',', 2) > ''
        THEN round( split_part(c.val, ',',1)::numeric, split_part(c.val,',',2)::integer )::float8
        ELSE c.val::float8 END
        FROM c;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_spatially_unique" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT
		TRUE
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s, pg_index idx, pg_operator op
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND s.contype = 'x'
		AND 0::smallint = ANY (s.conkey)
		AND idx.indexrelid = s.conindid
		AND pg_get_indexdef(idx.indexrelid, 1, true) LIKE '(' || quote_ident($3) || '::geometry)'
		AND s.conexclop[1] = op.oid
		AND op.oprname = '=';
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_srid" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT
		regexp_replace(
			split_part(s.consrc, ' = ', 2),
			'[\(\)]', '', 'g'
		)::integer
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_srid(% = %';
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_raster_constraint_nodata_values" returnType="ARRAY" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT array_agg(round(nodatavalue::numeric, 10))::numeric[] FROM public.ST_BandMetaData($1, ARRAY[]::int[]); ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_raster_constraint_out_db" returnType="ARRAY" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT array_agg(isoutdb)::boolean[] FROM public.ST_BandMetaData($1, ARRAY[]::int[]); ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_pixel_types" returnType="ARRAY" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT array_agg(pixeltype)::text[] FROM  public.ST_BandMetaData($1, ARRAY[]::int[]); ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_3ddfullywithin" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOM_dfullywithin3d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_3ddwithin" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOM_dwithin3d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_3dintersects" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[intersects3d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_asgeojson" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_as_geojson]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_asgml" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_as_gml]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_askml" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_as_kml]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_aspect4ma" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		x integer;
		y integer;
		z integer;

		_width double precision;
		_height double precision;
		_units text;

		dz_dx double precision;
		dz_dy double precision;
		aspect double precision;
		halfpi double precision;

		_value double precision[][][];
		ndims int;
	BEGIN
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;

		IF array_length(userargs, 1) < 3 THEN
			RAISE EXCEPTION 'At least three elements must be provided for the third parameter';
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);

		_width := userargs[1]::double precision;
		_height := userargs[2]::double precision;
		_units := userargs[3];

		
		-- check that center pixel isn't NODATA
		IF _value[z][2][2] IS NULL THEN
			RETURN NULL;
		-- substitute center pixel for any neighbor pixels that are NODATA
		ELSE
			FOR y IN 1..3 LOOP
				FOR x IN 1..3 LOOP
					IF _value[z][y][x] IS NULL THEN
						_value[z][y][x] = _value[z][2][2];
					END IF;
				END LOOP;
			END LOOP;
		END IF;

		dz_dy := ((_value[z][3][1] + _value[z][3][2] + _value[z][3][2] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][1][2] + _value[z][1][2] + _value[z][1][3]));
		dz_dx := ((_value[z][1][3] + _value[z][2][3] + _value[z][2][3] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][2][1] + _value[z][2][1] + _value[z][3][1]));

		-- aspect is flat
		IF abs(dz_dx) = 0::double precision AND abs(dz_dy) = 0::double precision THEN
			RETURN -1;
		END IF;

		-- aspect is in radians
		aspect := atan2(dz_dy, -dz_dx);

		-- north = 0, pi/2 = east, 3pi/2 = west
		halfpi := pi() / 2.0;
		IF aspect > halfpi THEN
			aspect := (5.0 * halfpi) - aspect;
		ELSE
			aspect := halfpi - aspect;
		END IF;

		IF aspect = 2 * pi() THEN
			aspect := 0.;
		END IF;

		-- output depends on user preference
		CASE substring(upper(trim(leading from _units)) for 3)
			-- radians
			WHEN 'rad' THEN
				RETURN aspect;
			-- degrees (default)
			ELSE
				RETURN degrees(aspect);
		END CASE;

	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_asraster" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_asRaster]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_asx3d" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOM_asX3D]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_bestsrid" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_bestsrid]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_buffer" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[buffer]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_clip" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_clip]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_colormap" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_colorMap]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_concavehull" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
	vexhull GEOMETRY;
	var_resultgeom geometry;
	var_inputgeom geometry;
	vexring GEOMETRY;
	cavering GEOMETRY;
	cavept geometry[];
	seglength double precision;
	var_tempgeom geometry;
	scale_factor float := 1;
	i integer;

	BEGIN

		-- First compute the ConvexHull of the geometry
		vexhull := public.ST_ConvexHull(param_inputgeom);
		var_inputgeom := param_inputgeom;
		--A point really has no concave hull
		IF public.ST_GeometryType(vexhull) = 'ST_Point' OR public.ST_GeometryType(vexHull) = 'ST_LineString' THEN
			RETURN vexhull;
		END IF;

		-- convert the hull perimeter to a linestring so we can manipulate individual points
		vexring := CASE WHEN public.ST_GeometryType(vexhull) = 'ST_LineString' THEN vexhull ELSE public.ST_ExteriorRing(vexhull) END;
		IF abs(public.ST_X(public.ST_PointN(vexring,1))) < 1 THEN --scale the geometry to prevent stupid precision errors - not sure it works so make low for now
			scale_factor := 100;
			vexring := public.ST_Scale(vexring, scale_factor,scale_factor);
			var_inputgeom := public.ST_Scale(var_inputgeom, scale_factor, scale_factor);
			--RAISE NOTICE 'Scaling';
		END IF;
		seglength := public.ST_Length(vexring)/least(public.ST_NPoints(vexring)*2,1000) ;

		vexring := public.ST_Segmentize(vexring, seglength);
		-- find the point on the original geom that is closest to each point of the convex hull and make a new linestring out of it.
		cavering := public.ST_Collect(
			ARRAY(

				SELECT
					public.ST_ClosestPoint(var_inputgeom, pt ) As the_geom
					FROM (
						SELECT  public.ST_PointN(vexring, n ) As pt, n
							FROM
							generate_series(1, public.ST_NPoints(vexring) ) As n
						) As pt

				)
			)
		;


		var_resultgeom := public.ST_MakeLine(geom)
			FROM public.ST_Dump(cavering) As foo;

		IF public.ST_IsSimple(var_resultgeom) THEN
			var_resultgeom := public.ST_MakePolygon(var_resultgeom);
			--RAISE NOTICE 'is Simple: %', var_resultgeom;
		ELSE 
			--RAISE NOTICE 'is not Simple: %', var_resultgeom;
			var_resultgeom := public.ST_ConvexHull(var_resultgeom);
		END IF;

		IF scale_factor > 1 THEN -- scale the result back
			var_resultgeom := public.ST_Scale(var_resultgeom, 1/scale_factor, 1/scale_factor);
		END IF;
		RETURN var_resultgeom;

	END;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_contains" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_contains]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_containsproperly" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_containsProperly]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_convertarray4ma" returnType="ARRAY" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		_value double precision[][][];
		x int;
		y int;
	BEGIN
		IF array_ndims(value) != 2 THEN
			RAISE EXCEPTION 'Function parameter must be a 2-dimension array';
		END IF;

		_value := array_fill(NULL::double precision, ARRAY[1, array_length(value, 1), array_length(value, 2)]::int[], ARRAY[1, array_lower(value, 1), array_lower(value, 2)]::int[]);

		-- row
		FOR y IN array_lower(value, 1)..array_upper(value, 1) LOOP
			-- column
			FOR x IN array_lower(value, 2)..array_upper(value, 2) LOOP
				_value[1][y][x] = value[y][x];
			END LOOP;
		END LOOP;

		RETURN _value;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_st_count" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		count bigint;
	BEGIN
		EXECUTE 'SELECT public.ST_CountAgg('
			|| quote_ident($2) || ', '
			|| $3 || ', '
			|| $4 || ', '
			|| $5 || ') '
			|| 'FROM ' || quote_ident($1)
	 	INTO count;
		RETURN count;
	END;
 	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_countagg_finalfn" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	BEGIN
		IF agg IS NULL THEN
			RAISE EXCEPTION 'Cannot count coverage';
		END IF;

		RETURN agg.count;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_countagg_transfn" returnType="agg_count" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		rtn_agg agg_count;
	BEGIN
		rtn_agg :=  public.__st_countagg_transfn(
			agg,
			rast,
			nband, exclude_nodata_value,
			sample_percent
		);
		RETURN rtn_agg;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_coveredby" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_coveredby]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_covers" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_covers]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_crosses" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[crosses]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_dfullywithin" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_dfullywithin]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_distance" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_distance]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_distancetree" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_distance_tree]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_distanceuncached" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_distance_uncached]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_dwithin" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_dwithin]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_dwithinuncached" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_dwithin_uncached]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_equals" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[ST_Equals]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_expand" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_expand]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_gdalwarp" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_GDALWarp]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_geomfromgml" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geom_from_gml]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_hillshade4ma" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		_pixwidth double precision;
		_pixheight double precision;
		_width double precision;
		_height double precision;
		_azimuth double precision;
		_altitude double precision;
		_bright double precision;
		_scale double precision;

		dz_dx double precision;
		dz_dy double precision;
		azimuth double precision;
		zenith double precision;
		slope double precision;
		aspect double precision;
		shade double precision;

		_value double precision[][][];
		ndims int;
		z int;
	BEGIN
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;

		IF array_length(userargs, 1) < 8 THEN
			RAISE EXCEPTION 'At least eight elements must be provided for the third parameter';
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);

		_pixwidth := userargs[1]::double precision;
		_pixheight := userargs[2]::double precision;
		_width := userargs[3]::double precision;
		_height := userargs[4]::double precision;
		_azimuth := userargs[5]::double precision;
		_altitude := userargs[6]::double precision;
		_bright := userargs[7]::double precision;
		_scale := userargs[8]::double precision;

		-- check that pixel is not edge pixel
		IF (pos[1][1] = 1 OR pos[1][2] = 1) OR (pos[1][1] = _width OR pos[1][2] = _height) THEN
			RETURN NULL;
		END IF;

		-- clamp azimuth
		IF _azimuth < 0. THEN
			RAISE NOTICE 'Clamping provided azimuth value % to 0', _azimuth;
			_azimuth := 0.;
		ELSEIF _azimuth >= 360. THEN
			RAISE NOTICE 'Converting provided azimuth value % to be between 0 and 360', _azimuth;
			_azimuth := _azimuth - (360. * floor(_azimuth / 360.));
		END IF;
		azimuth := 360. - _azimuth + 90.;
		IF azimuth >= 360. THEN
			azimuth := azimuth - 360.;
		END IF;
		azimuth := radians(azimuth);
		--RAISE NOTICE 'azimuth = %', azimuth;

		-- clamp altitude
		IF _altitude < 0. THEN
			RAISE NOTICE 'Clamping provided altitude value % to 0', _altitude;
			_altitude := 0.;
		ELSEIF _altitude > 90. THEN
			RAISE NOTICE 'Clamping provided altitude value % to 90', _altitude;
			_altitude := 90.;
		END IF;
		zenith := radians(90. - _altitude);
		--RAISE NOTICE 'zenith = %', zenith;

		-- clamp bright
		IF _bright < 0. THEN
			RAISE NOTICE 'Clamping provided bright value % to 0', _bright;
			_bright := 0.;
		ELSEIF _bright > 255. THEN
			RAISE NOTICE 'Clamping provided bright value % to 255', _bright;
			_bright := 255.;
		END IF;

		dz_dy := ((_value[z][3][1] + _value[z][3][2] + _value[z][3][2] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][1][2] + _value[z][1][2] + _value[z][1][3])) / (8 * _pixheight);
		dz_dx := ((_value[z][1][3] + _value[z][2][3] + _value[z][2][3] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][2][1] + _value[z][2][1] + _value[z][3][1])) / (8 * _pixwidth);

		slope := atan(sqrt(dz_dx * dz_dx + dz_dy * dz_dy) / _scale);

		IF dz_dx != 0. THEN
			aspect := atan2(dz_dy, -dz_dx);

			IF aspect < 0. THEN
				aspect := aspect + (2.0 * pi());
			END IF;
		ELSE
			IF dz_dy > 0. THEN
				aspect := pi() / 2.;
			ELSEIF dz_dy < 0. THEN
				aspect := (2. * pi()) - (pi() / 2.);
			-- set to pi as that is the expected PostgreSQL answer in Linux
			ELSE
				aspect := pi();
			END IF;
		END IF;

		shade := _bright * ((cos(zenith) * cos(slope)) + (sin(zenith) * sin(slope) * cos(azimuth - aspect)));

		IF shade < 0. THEN
			shade := 0;
		END IF;

		RETURN shade;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_histogram" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_histogramCoverage]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_intersects" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_intersects]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_linecrossingdirection" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[ST_LineCrossingDirection]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_longestline" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOM_longestline2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_mapalgebra" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_nMapAlgebraExpr]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_maxdistance" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOM_maxdistance2d_linestring]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_neighborhood" returnType="ARRAY" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_neighborhood]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_orderingequals" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOM_same]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_overlaps" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_overlaps]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_pixelaspolygons" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_getPixelPolygons]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_pointoutside" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_point_outside]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_st_quantile" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_quantileCoverage]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_rastertoworldcoord" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_rasterToWorldCoord]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_reclass" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_reclass]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_roughness4ma" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		x integer;
		y integer;
		z integer;

		minimum double precision;
		maximum double precision;

		_value double precision[][][];
		ndims int;
	BEGIN

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);

		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;

		-- check that center pixel isn't NODATA
		IF _value[z][2][2] IS NULL THEN
			RETURN NULL;
		-- substitute center pixel for any neighbor pixels that are NODATA
		ELSE
			FOR y IN 1..3 LOOP
				FOR x IN 1..3 LOOP
					IF _value[z][y][x] IS NULL THEN
						_value[z][y][x] = _value[z][2][2];
					END IF;
				END LOOP;
			END LOOP;
		END IF;

		minimum := _value[z][1][1];
		maximum := _value[z][1][1];

		FOR Y IN 1..3 LOOP
		    FOR X IN 1..3 LOOP
		    	 IF _value[z][y][x] < minimum THEN
			    minimum := _value[z][y][x];
			 ELSIF _value[z][y][x] > maximum THEN
			    maximum := _value[z][y][x];
			 END IF;
		    END LOOP;
		END LOOP;

		RETURN maximum - minimum;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_samealignment_finalfn" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT $1.aligned ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_samealignment_transfn" returnType="agg_samealignment" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		m record;
		aligned boolean;
	BEGIN
		IF agg IS NULL THEN
			agg.refraster := NULL;
			agg.aligned := NULL;
		END IF;

		IF rast IS NULL THEN
			agg.aligned := NULL;
		ELSE
			IF agg.refraster IS NULL THEN
				m := ST_Metadata(rast);
				agg.refraster := ST_MakeEmptyRaster(1, 1, m.upperleftx, m.upperlefty, m.scalex, m.scaley, m.skewx, m.skewy, m.srid);
				agg.aligned := TRUE;
			ELSE IF agg.aligned IS TRUE THEN
					agg.aligned := ST_SameAlignment(agg.refraster, rast);
				END IF;
			END IF;
		END IF;
		RETURN agg;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_setvalues" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_setPixelValuesArray]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_slope4ma" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		x integer;
		y integer;
		z integer;

		_pixwidth double precision;
		_pixheight double precision;
		_width double precision;
		_height double precision;
		_units text;
		_scale double precision;

		dz_dx double precision;
		dz_dy double precision;

		slope double precision;

		_value double precision[][][];
		ndims int;
	BEGIN

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);

		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;

		IF array_length(userargs, 1) < 6 THEN
			RAISE EXCEPTION 'At least six elements must be provided for the third parameter';
		END IF;

		_pixwidth := userargs[1]::double precision;
		_pixheight := userargs[2]::double precision;
		_width := userargs[3]::double precision;
		_height := userargs[4]::double precision;
		_units := userargs[5];
		_scale := userargs[6]::double precision;

		
		-- check that center pixel isn't NODATA
		IF _value[z][2][2] IS NULL THEN
			RETURN NULL;
		-- substitute center pixel for any neighbor pixels that are NODATA
		ELSE
			FOR y IN 1..3 LOOP
				FOR x IN 1..3 LOOP
					IF _value[z][y][x] IS NULL THEN
						_value[z][y][x] = _value[z][2][2];
					END IF;
				END LOOP;
			END LOOP;
		END IF;

		dz_dy := ((_value[z][3][1] + _value[z][3][2] + _value[z][3][2] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][1][2] + _value[z][1][2] + _value[z][1][3])) / _pixheight;
		dz_dx := ((_value[z][1][3] + _value[z][2][3] + _value[z][2][3] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][2][1] + _value[z][2][1] + _value[z][3][1])) / _pixwidth;

		slope := sqrt(dz_dx * dz_dx + dz_dy * dz_dy) / (8 * _scale);

		-- output depends on user preference
		CASE substring(upper(trim(leading from _units)) for 3)
			-- percentages
			WHEN 'PER' THEN
				slope := 100.0 * slope;
			-- radians
			WHEN 'rad' THEN
				slope := atan(slope);
			-- degrees (default)
			ELSE
				slope := degrees(atan(slope));
		END CASE;

		RETURN slope;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_summarystats" returnType="summarystats" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_summaryStats]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_summarystats_finalfn" returnType="summarystats" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_summaryStats_finalfn]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_summarystats_transfn" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_summaryStats_transfn]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_tile" returnType="SETOF raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_tile]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_touches" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_touches]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_tpi4ma" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		x integer;
		y integer;
		z integer;

		Z1 double precision;
		Z2 double precision;
		Z3 double precision;
		Z4 double precision;
		Z5 double precision;
		Z6 double precision;
		Z7 double precision;
		Z8 double precision;
		Z9 double precision;

		tpi double precision;
		mean double precision;
		_value double precision[][][];
		ndims int;
	BEGIN
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);

		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;

		-- check that center pixel isn't NODATA
		IF _value[z][2][2] IS NULL THEN
			RETURN NULL;
		-- substitute center pixel for any neighbor pixels that are NODATA
		ELSE
			FOR y IN 1..3 LOOP
				FOR x IN 1..3 LOOP
					IF _value[z][y][x] IS NULL THEN
						_value[z][y][x] = _value[z][2][2];
					END IF;
				END LOOP;
			END LOOP;
		END IF;

		-------------------------------------------------
		--|   Z1= Z(-1,1) |  Z2= Z(0,1)	| Z3= Z(1,1)  |--
		-------------------------------------------------
		--|   Z4= Z(-1,0) |  Z5= Z(0,0) | Z6= Z(1,0)  |--
		-------------------------------------------------
		--|   Z7= Z(-1,-1)|  Z8= Z(0,-1)|  Z9= Z(1,-1)|--
		-------------------------------------------------

		Z1 := _value[z][1][1];
		Z2 := _value[z][2][1];
		Z3 := _value[z][3][1];
		Z4 := _value[z][1][2];
		Z5 := _value[z][2][2];
		Z6 := _value[z][3][2];
		Z7 := _value[z][1][3];
		Z8 := _value[z][2][3];
		Z9 := _value[z][3][3];

		mean := (Z1 + Z2 + Z3 + Z4 + Z6 + Z7 + Z8 + Z9)/8;
		tpi := Z5-mean;

		return tpi;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_tri4ma" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		x integer;
		y integer;
		z integer;

		Z1 double precision;
		Z2 double precision;
		Z3 double precision;
		Z4 double precision;
		Z5 double precision;
		Z6 double precision;
		Z7 double precision;
		Z8 double precision;
		Z9 double precision;

		tri double precision;
		_value double precision[][][];
		ndims int;
	BEGIN
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);

		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;

		-- check that center pixel isn't NODATA
		IF _value[z][2][2] IS NULL THEN
			RETURN NULL;
		-- substitute center pixel for any neighbor pixels that are NODATA
		ELSE
			FOR y IN 1..3 LOOP
				FOR x IN 1..3 LOOP
					IF _value[z][y][x] IS NULL THEN
						_value[z][y][x] = _value[z][2][2];
					END IF;
				END LOOP;
			END LOOP;
		END IF;

		-------------------------------------------------
		--|   Z1= Z(-1,1) |  Z2= Z(0,1)	| Z3= Z(1,1)  |--
		-------------------------------------------------
		--|   Z4= Z(-1,0) |  Z5= Z(0,0) | Z6= Z(1,0)  |--
		-------------------------------------------------
		--|   Z7= Z(-1,-1)|  Z8= Z(0,-1)|  Z9= Z(1,-1)|--
		-------------------------------------------------

		-- _scale width and height units / z units to make z units equal to height width units
		Z1 := _value[z][1][1];
		Z2 := _value[z][2][1];
		Z3 := _value[z][3][1];
		Z4 := _value[z][1][2];
		Z5 := _value[z][2][2];
		Z6 := _value[z][3][2];
		Z7 := _value[z][1][3];
		Z8 := _value[z][2][3];
		Z9 := _value[z][3][3];

		tri := ( abs(Z1 - Z5 ) + abs( Z2 - Z5 ) + abs( Z3 - Z5 ) + abs( Z4 - Z5 ) + abs( Z6 - Z5 ) + abs( Z7 - Z5 ) + abs( Z8 - Z5 ) + abs ( Z9 - Z5 )) / 8;

		return tri;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_union_finalfn" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_union_finalfn]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_union_transfn" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_union_transfn]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_st_valuecount" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_valueCountCoverage]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_voronoi" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[ST_Voronoi]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_within" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._st_contains($3, $4, $1, $2) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_worldtorastercoord" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_worldToRasterCoord]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_updaterastersrid" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		fqtn text;
		schema name;
		sql text;
		srid integer;
		ct boolean;
	BEGIN
		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;

		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;

		-- clamp SRID
		IF new_srid < 0 THEN
			srid :=  public.ST_SRID('POINT EMPTY'::public.geometry);
			RAISE NOTICE 'SRID % converted to the officially unknown SRID %', new_srid, srid;
		ELSE
			srid := new_srid;
		END IF;

		-- drop coverage tile constraint
		-- done separately just in case constraint doesn't exist
		ct := public._raster_constraint_info_coverage_tile(schema, $2, $3);
		IF ct IS TRUE THEN
			PERFORM  public._drop_raster_constraint_coverage_tile(schema, $2, $3);
		END IF;

		-- drop SRID, extent, alignment constraints
		PERFORM  public.DropRasterConstraints(schema, $2, $3, 'extent', 'alignment', 'srid');

		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		-- update SRID
		sql := 'UPDATE ' || fqtn ||
			' SET ' || quote_ident($3) ||
			' =  public.ST_SetSRID(' || quote_ident($3) ||
			'::raster, ' || srid || ')';
		RAISE NOTICE 'sql = %', sql;
		EXECUTE sql;

		-- add SRID constraint
		PERFORM  public.AddRasterConstraints(schema, $2, $3, 'srid', 'extent', 'alignment');

		-- add coverage tile constraint if needed
		IF ct IS TRUE THEN
			PERFORM  public._add_raster_constraint_coverage_tile(schema, $2, $3);
		END IF;

		RETURN TRUE;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="addauth" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: auth_token - Add an authorization token to be used in current transaction.]]></comment>
         <definition language="PLPGSQL"><![CDATA[ 
DECLARE
	lockid alias for $1;
	okay boolean;
	myrec record;
BEGIN
	-- check to see if table exists
	--  if not, CREATE TEMP TABLE mylock (transid xid, lockcode text)
	okay := 'f';
	FOR myrec IN SELECT * FROM pg_class WHERE relname = 'temp_lock_have_table' LOOP
		okay := 't';
	END LOOP; 
	IF (okay <> 't') THEN 
		CREATE TEMP TABLE temp_lock_have_table (transid xid, lockcode text);
			-- this will only work from pgsql7.4 up
			-- ON COMMIT DELETE ROWS;
	END IF;

	--  INSERT INTO mylock VALUES ( $1)
--	EXECUTE 'INSERT INTO temp_lock_have_table VALUES ( '||
--		quote_literal(getTransactionID()) || ',' ||
--		quote_literal(lockid) ||')';

	INSERT INTO temp_lock_have_table VALUES (getTransactionID(), lockid);

	RETURN true::boolean;
END;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="addgeometrycolumn" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: catalog_name, schema_name, table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table of attributes. By default uses type modifier to define rather than constraints. Pass in false for use_typmod to get old check constraint based behavior]]></comment>
         <definition language="PLPGSQL"><![CDATA[
DECLARE
	rec RECORD;
	sr varchar;
	real_schema name;
	sql text;
	new_srid integer;

BEGIN

	-- Verify geometry type
	IF (postgis_type_name(new_type,new_dim) IS NULL )
	THEN
		RAISE EXCEPTION 'Invalid type name "%(%)" - valid ones are:
	POINT, MULTIPOINT,
	LINESTRING, MULTILINESTRING,
	POLYGON, MULTIPOLYGON,
	CIRCULARSTRING, COMPOUNDCURVE, MULTICURVE,
	CURVEPOLYGON, MULTISURFACE,
	GEOMETRY, GEOMETRYCOLLECTION,
	POINTM, MULTIPOINTM,
	LINESTRINGM, MULTILINESTRINGM,
	POLYGONM, MULTIPOLYGONM,
	CIRCULARSTRINGM, COMPOUNDCURVEM, MULTICURVEM
	CURVEPOLYGONM, MULTISURFACEM, TRIANGLE, TRIANGLEM,
	POLYHEDRALSURFACE, POLYHEDRALSURFACEM, TIN, TINM
	or GEOMETRYCOLLECTIONM', new_type, new_dim;
		RETURN 'fail';
	END IF;


	-- Verify dimension
	IF ( (new_dim >4) OR (new_dim <2) ) THEN
		RAISE EXCEPTION 'invalid dimension';
		RETURN 'fail';
	END IF;

	IF ( (new_type LIKE '%M') AND (new_dim!=3) ) THEN
		RAISE EXCEPTION 'TypeM needs 3 dimensions';
		RETURN 'fail';
	END IF;


	-- Verify SRID
	IF ( new_srid_in > 0 ) THEN
		IF new_srid_in > 998999 THEN
			RAISE EXCEPTION 'AddGeometryColumn() - SRID must be <= %', 998999;
		END IF;
		new_srid := new_srid_in;
		SELECT SRID INTO sr FROM spatial_ref_sys WHERE SRID = new_srid;
		IF NOT FOUND THEN
			RAISE EXCEPTION 'AddGeometryColumn() - invalid SRID';
			RETURN 'fail';
		END IF;
	ELSE
		new_srid := public.ST_SRID('POINT EMPTY'::public.geometry);
		IF ( new_srid_in != new_srid ) THEN
			RAISE NOTICE 'SRID value % converted to the officially unknown SRID value %', new_srid_in, new_srid;
		END IF;
	END IF;


	-- Verify schema
	IF ( schema_name IS NOT NULL AND schema_name != '' ) THEN
		sql := 'SELECT nspname FROM pg_namespace ' ||
			'WHERE text(nspname) = ' || quote_literal(schema_name) ||
			'LIMIT 1';
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;

		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Schema % is not a valid schemaname', quote_literal(schema_name);
			RETURN 'fail';
		END IF;
	END IF;

	IF ( real_schema IS NULL ) THEN
		RAISE DEBUG 'Detecting schema';
		sql := 'SELECT n.nspname AS schemaname ' ||
			'FROM pg_catalog.pg_class c ' ||
			  'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace ' ||
			'WHERE c.relkind = ' || quote_literal('r') ||
			' AND n.nspname NOT IN (' || quote_literal('pg_catalog') || ', ' || quote_literal('pg_toast') || ')' ||
			' AND pg_catalog.pg_table_is_visible(c.oid)' ||
			' AND c.relname = ' || quote_literal(table_name);
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;

		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Table % does not occur in the search_path', quote_literal(table_name);
			RETURN 'fail';
		END IF;
	END IF;


	-- Add geometry column to table
	IF use_typmod THEN
	     sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD COLUMN ' || quote_ident(column_name) ||
            ' geometry(' || public.postgis_type_name(new_type, new_dim) || ', ' || new_srid::text || ')';
        RAISE DEBUG '%', sql;
	ELSE
        sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD COLUMN ' || quote_ident(column_name) ||
            ' geometry ';
        RAISE DEBUG '%', sql;
    END IF;
	EXECUTE sql;

	IF NOT use_typmod THEN
        -- Add table CHECKs
        sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD CONSTRAINT '
            || quote_ident('enforce_srid_' || column_name)
            || ' CHECK (st_srid(' || quote_ident(column_name) ||
            ') = ' || new_srid::text || ')' ;
        RAISE DEBUG '%', sql;
        EXECUTE sql;

        sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD CONSTRAINT '
            || quote_ident('enforce_dims_' || column_name)
            || ' CHECK (st_ndims(' || quote_ident(column_name) ||
            ') = ' || new_dim::text || ')' ;
        RAISE DEBUG '%', sql;
        EXECUTE sql;

        IF ( NOT (new_type = 'GEOMETRY')) THEN
            sql := 'ALTER TABLE ' ||
                quote_ident(real_schema) || '.' || quote_ident(table_name) || ' ADD CONSTRAINT ' ||
                quote_ident('enforce_geotype_' || column_name) ||
                ' CHECK (GeometryType(' ||
                quote_ident(column_name) || ')=' ||
                quote_literal(new_type) || ' OR (' ||
                quote_ident(column_name) || ') is null)';
            RAISE DEBUG '%', sql;
            EXECUTE sql;
        END IF;
    END IF;

	RETURN
		real_schema || '.' ||
		table_name || '.' || column_name ||
		' SRID:' || new_srid::text ||
		' TYPE:' || new_type ||
		' DIMS:' || new_dim::text || ' ';
END;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="addoverviewconstraints" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: ovtable, ovcolumn, reftable, refcolumn, ovfactor - Tag a raster column as being an overview of another.]]></comment>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		x int;
		s name;
		t name;
		oschema name;
		rschema name;
		sql text;
		rtn boolean;
	BEGIN
		FOR x IN 1..2 LOOP
			s := '';

			IF x = 1 THEN
				s := $1;
				t := $2;
			ELSE
				s := $4;
				t := $5;
			END IF;

			-- validate user-provided schema
			IF length(s) > 0 THEN
				sql := 'SELECT nspname FROM pg_namespace '
					|| 'WHERE nspname = ' || quote_literal(s)
					|| 'LIMIT 1';
				EXECUTE sql INTO s;

				IF s IS NULL THEN
					RAISE EXCEPTION 'The value % is not a valid schema', quote_literal(s);
					RETURN FALSE;
				END IF;
			END IF;

			-- no schema, determine what it could be using the table
			IF length(s) < 1 THEN
				sql := 'SELECT n.nspname AS schemaname '
					|| 'FROM pg_catalog.pg_class c '
					|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
					|| 'WHERE c.relkind = ' || quote_literal('r')
					|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
					|| ', ' || quote_literal('pg_toast')
					|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
					|| ' AND c.relname = ' || quote_literal(t);
				EXECUTE sql INTO s;

				IF s IS NULL THEN
					RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal(t);
					RETURN FALSE;
				END IF;
			END IF;

			IF x = 1 THEN
				oschema := s;
			ELSE
				rschema := s;
			END IF;
		END LOOP;

		-- reference raster
		rtn :=  public._add_overview_constraint(oschema, $2, $3, rschema, $5, $6, $7);
		IF rtn IS FALSE THEN
			RAISE EXCEPTION 'Unable to add the overview constraint.  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;

		RETURN TRUE;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="addrasterconstraints" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastschema, rasttable, rastcolumn, srid=true, scale_x=true, scale_y=true, blocksize_x=true, blocksize_y=true, same_alignment=true, regular_blocking=false, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true of the constraint setting was accomplished and if issues a notice.]]></comment>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		constraints text[];
	BEGIN
		IF srid IS TRUE THEN
			constraints := constraints || 'srid'::text;
		END IF;

		IF scale_x IS TRUE THEN
			constraints := constraints || 'scale_x'::text;
		END IF;

		IF scale_y IS TRUE THEN
			constraints := constraints || 'scale_y'::text;
		END IF;

		IF blocksize_x IS TRUE THEN
			constraints := constraints || 'blocksize_x'::text;
		END IF;

		IF blocksize_y IS TRUE THEN
			constraints := constraints || 'blocksize_y'::text;
		END IF;

		IF same_alignment IS TRUE THEN
			constraints := constraints || 'same_alignment'::text;
		END IF;

		IF regular_blocking IS TRUE THEN
			constraints := constraints || 'regular_blocking'::text;
		END IF;

		IF num_bands IS TRUE THEN
			constraints := constraints || 'num_bands'::text;
		END IF;

		IF pixel_types IS TRUE THEN
			constraints := constraints || 'pixel_types'::text;
		END IF;

		IF nodata_values IS TRUE THEN
			constraints := constraints || 'nodata_values'::text;
		END IF;

		IF out_db IS TRUE THEN
			constraints := constraints || 'out_db'::text;
		END IF;

		IF extent IS TRUE THEN
			constraints := constraints || 'extent'::text;
		END IF;

		RETURN public.AddRasterConstraints($1, $2, $3, VARIADIC constraints);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box" returnType="box" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOM_to_BOX]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box2d" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOM_to_BOX2D]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box2d_in" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[BOX2D_in]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box2d_out" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[BOX2D_out]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box2df_in" returnType="box2df" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[box2df_in]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box2df_out" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[box2df_out]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box3d" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[select box3d( public.ST_convexhull($1))]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box3d_in" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[BOX3D_in]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box3d_out" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[BOX3D_out]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box3dtobox" returnType="box" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[BOX3D_to_BOX]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="bytea" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_to_bytea]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="checkauth" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_table_name, a_key_column_name - Creates trigger on a table to prevent/allow updates and deletes of rows based on authorization token.]]></comment>
         <definition language="PLPGSQL"><![CDATA[ 
DECLARE
	schema text;
BEGIN
	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	if ( $1 != '' ) THEN
		schema = $1;
	ELSE
		SELECT current_schema() into schema;
	END IF;

	-- TODO: check for an already existing trigger ?

	EXECUTE 'CREATE TRIGGER check_auth BEFORE UPDATE OR DELETE ON ' 
		|| quote_ident(schema) || '.' || quote_ident($2)
		||' FOR EACH ROW EXECUTE PROCEDURE CheckAuthTrigger('
		|| quote_literal($3) || ')';

	RETURN 0;
END;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="checkauthtrigger" returnType="trigger" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[check_authorization]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="contains_2d" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_contains_box2df_geom_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="disablelongtransactions" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Disable long transaction support. This function removes the long transaction support metadata tables, and drops all triggers attached to lock-checked tables.]]></comment>
         <definition language="PLPGSQL"><![CDATA[ 
DECLARE
	rec RECORD;

BEGIN

	--
	-- Drop all triggers applied by CheckAuth()
	--
	FOR rec IN
		SELECT c.relname, t.tgname, t.tgargs FROM pg_trigger t, pg_class c, pg_proc p
		WHERE p.proname = 'checkauthtrigger' and t.tgfoid = p.oid and t.tgrelid = c.oid
	LOOP
		EXECUTE 'DROP TRIGGER ' || quote_ident(rec.tgname) ||
			' ON ' || quote_ident(rec.relname);
	END LOOP;

	--
	-- Drop the authorization_table table
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorization_table' LOOP
		DROP TABLE authorization_table;
	END LOOP;

	--
	-- Drop the authorized_tables view
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorized_tables' LOOP
		DROP VIEW authorized_tables;
	END LOOP;

	RETURN 'Long transactions support disabled';
END;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="dropgeometrycolumn" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: catalog_name, schema_name, table_name, column_name - Removes a geometry column from a spatial table.]]></comment>
         <definition language="PLPGSQL"><![CDATA[
DECLARE
	myrec RECORD;
	okay boolean;
	real_schema name;

BEGIN


	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = false;

		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := true;
		END LOOP;

		IF ( okay <>  true ) THEN
			RAISE NOTICE 'Invalid schema name - using current_schema()';
			SELECT current_schema() into real_schema;
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT current_schema() into real_schema;
	END IF;

	-- Find out if the column is in the geometry_columns table
	okay = false;
	FOR myrec IN SELECT * from public.geometry_columns where f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := true;
	END LOOP;
	IF (okay <> true) THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN false;
	END IF;

	-- Remove table column
	EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) || '.' ||
		quote_ident(table_name) || ' DROP COLUMN ' ||
		quote_ident(column_name);

	RETURN real_schema || '.' || table_name || '.' || column_name ||' effectively removed.';

END;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="dropgeometrytable" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: catalog_name, schema_name, table_name - Drops a table and all its references in geometry_columns.]]></comment>
         <definition language="PLPGSQL"><![CDATA[
DECLARE
	real_schema name;

BEGIN

	IF ( schema_name = '' ) THEN
		SELECT current_schema() into real_schema;
	ELSE
		real_schema = schema_name;
	END IF;

	-- TODO: Should we warn if table doesn't exist probably instead just saying dropped
	-- Remove table
	EXECUTE 'DROP TABLE IF EXISTS '
		|| quote_ident(real_schema) || '.' ||
		quote_ident(table_name) || ' RESTRICT';

	RETURN
		real_schema || '.' ||
		table_name ||' dropped.';

END;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="dropoverviewconstraints" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: ovtable, ovcolumn - Untag a raster column from being an overview of another.]]></comment>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		schema name;
		sql text;
		rtn boolean;
	BEGIN
		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;

		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;

		rtn :=  public._drop_overview_constraint(schema, $2, $3);
		IF rtn IS FALSE THEN
			RAISE EXCEPTION 'Unable to drop the overview constraint .  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;

		RETURN TRUE;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="droprasterconstraints" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		max int;
		x int;
		schema name;
		sql text;
		kw text;
		rtn boolean;
		cnt int;
	BEGIN
		cnt := 0;
		max := array_length(constraints, 1);
		IF max < 1 THEN
			RAISE NOTICE 'No constraints indicated to be dropped.  Doing nothing';
			RETURN TRUE;
		END IF;

		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;

		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;

		<<kwloop>>
		FOR x in 1..max LOOP
			kw := trim(both from lower(constraints[x]));

			BEGIN
				CASE
					WHEN kw = 'srid' THEN
						RAISE NOTICE 'Dropping SRID constraint';
						rtn :=  public._drop_raster_constraint_srid(schema, $2, $3);
					WHEN kw IN ('scale_x', 'scalex') THEN
						RAISE NOTICE 'Dropping scale-X constraint';
						rtn :=  public._drop_raster_constraint_scale(schema, $2, $3, 'x');
					WHEN kw IN ('scale_y', 'scaley') THEN
						RAISE NOTICE 'Dropping scale-Y constraint';
						rtn :=  public._drop_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw = 'scale' THEN
						RAISE NOTICE 'Dropping scale-X constraint';
						rtn :=  public._drop_raster_constraint_scale(schema, $2, $3, 'x');
						RAISE NOTICE 'Dropping scale-Y constraint';
						rtn :=  public._drop_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw IN ('blocksize_x', 'blocksizex', 'width') THEN
						RAISE NOTICE 'Dropping blocksize-X constraint';
						rtn :=  public._drop_raster_constraint_blocksize(schema, $2, $3, 'width');
					WHEN kw IN ('blocksize_y', 'blocksizey', 'height') THEN
						RAISE NOTICE 'Dropping blocksize-Y constraint';
						rtn :=  public._drop_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw = 'blocksize' THEN
						RAISE NOTICE 'Dropping blocksize-X constraint';
						rtn :=  public._drop_raster_constraint_blocksize(schema, $2, $3, 'width');
						RAISE NOTICE 'Dropping blocksize-Y constraint';
						rtn :=  public._drop_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw IN ('same_alignment', 'samealignment', 'alignment') THEN
						RAISE NOTICE 'Dropping alignment constraint';
						rtn :=  public._drop_raster_constraint_alignment(schema, $2, $3);
					WHEN kw IN ('regular_blocking', 'regularblocking') THEN
						rtn :=  public._drop_raster_constraint_regular_blocking(schema, $2, $3);

						RAISE NOTICE 'Dropping coverage tile constraint required for regular blocking';
						rtn :=  public._drop_raster_constraint_coverage_tile(schema, $2, $3);

						IF rtn IS NOT FALSE THEN
							RAISE NOTICE 'Dropping spatially unique constraint required for regular blocking';
							rtn :=  public._drop_raster_constraint_spatially_unique(schema, $2, $3);
						END IF;
					WHEN kw IN ('num_bands', 'numbands') THEN
						RAISE NOTICE 'Dropping number of bands constraint';
						rtn :=  public._drop_raster_constraint_num_bands(schema, $2, $3);
					WHEN kw IN ('pixel_types', 'pixeltypes') THEN
						RAISE NOTICE 'Dropping pixel type constraint';
						rtn :=  public._drop_raster_constraint_pixel_types(schema, $2, $3);
					WHEN kw IN ('nodata_values', 'nodatavalues', 'nodata') THEN
						RAISE NOTICE 'Dropping nodata value constraint';
						rtn :=  public._drop_raster_constraint_nodata_values(schema, $2, $3);
					WHEN kw IN ('out_db', 'outdb') THEN
						RAISE NOTICE 'Dropping out-of-database constraint';
						rtn :=  public._drop_raster_constraint_out_db(schema, $2, $3);
					WHEN kw = 'extent' THEN
						RAISE NOTICE 'Dropping maximum extent constraint';
						rtn :=  public._drop_raster_constraint_extent(schema, $2, $3);
					ELSE
						RAISE NOTICE 'Unknown constraint: %.  Skipping', quote_literal(constraints[x]);
						CONTINUE kwloop;
				END CASE;
			END;

			IF rtn IS FALSE THEN
				cnt := cnt + 1;
				RAISE WARNING 'Unable to drop constraint: %.  Skipping', quote_literal(constraints[x]);
			END IF;

		END LOOP kwloop;

		IF cnt = max THEN
			RAISE EXCEPTION 'None of the constraints specified could be dropped.  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;

		RETURN TRUE;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="enablelongtransactions" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Enable long transaction support. This function creates the required metadata tables, needs to be called once before using the other functions in this section. Calling it twice is harmless.]]></comment>
         <definition language="PLPGSQL"><![CDATA[ 
DECLARE
	"query" text;
	exists bool;
	rec RECORD;

BEGIN

	exists = 'f';
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorization_table'
	LOOP
		exists = 't';
	END LOOP;

	IF NOT exists
	THEN
		"query" = 'CREATE TABLE authorization_table (
			toid oid, -- table oid
			rid text, -- row id
			expires timestamp,
			authid text
		)';
		EXECUTE "query";
	END IF;

	exists = 'f';
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorized_tables'
	LOOP
		exists = 't';
	END LOOP;

	IF NOT exists THEN
		"query" = 'CREATE VIEW authorized_tables AS ' ||
			'SELECT ' ||
			'n.nspname as schema, ' ||
			'c.relname as table, trim(' ||
			quote_literal(chr(92) || '000') ||
			' from t.tgargs) as id_column ' ||
			'FROM pg_trigger t, pg_class c, pg_proc p ' ||
			', pg_namespace n ' ||
			'WHERE p.proname = ' || quote_literal('checkauthtrigger') ||
			' AND c.relnamespace = n.oid' ||
			' AND t.tgfoid = p.oid and t.tgrelid = c.oid';
		EXECUTE "query";
	END IF;

	RETURN 'Long transactions support enabled';
END;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="equals" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[ST_Equals]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="find_srid" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_schema_name, a_table_name, a_geomfield_name - The syntax is find_srid(a_db_schema, a_table, a_column) and the function returns the integer SRID of the specified column by searching through the GEOMETRY_COLUMNS table.]]></comment>
         <definition language="PLPGSQL"><![CDATA[
DECLARE
	schem varchar =  $1;
	tabl varchar = $2;
	sr int4;
BEGIN
-- if the table contains a . and the schema is empty
-- split the table into a schema and a table
-- otherwise drop through to default behavior
	IF ( schem = '' and strpos(tabl,'.') > 0 ) THEN
	 schem = substr(tabl,1,strpos(tabl,'.')-1);
	 tabl = substr(tabl,length(schem)+2);
	END IF;

	select SRID into sr from public.geometry_columns where (f_table_schema = schem or schem = '') and f_table_name = tabl and f_geometry_column = $3;
	IF NOT FOUND THEN
	   RAISE EXCEPTION 'find_srid() - could not find the corresponding SRID - is the geometry registered in the GEOMETRY_COLUMNS table?  Is there an uppercase/lowercase mismatch?';
	END IF;
	return sr;
END;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geog_brin_inclusion_add_value" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geog_brin_inclusion_add_value]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_enforce_typmod]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_analyze" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_analyze_nd]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_cmp" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_cmp]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_distance_knn" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_distance_knn]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_eq" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_eq]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_ge" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_ge]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_compress" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_compress]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_consistent" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_consistent]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_decompress" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_decompress]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_distance" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_geog_distance]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_penalty" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_penalty]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_picksplit" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_picksplit]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_same" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_same]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_union" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_union]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_gt" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_gt]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_in" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_in]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_le" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_le]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_lt" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_lt]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_out" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_out]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_overlaps" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_overlaps]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_recv" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_recv]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_send" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_send]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_typmod_in" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_typmod_in]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_typmod_out" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[postgis_typmod_out]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geom2d_brin_inclusion_add_value" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geom2d_brin_inclusion_add_value]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geom3d_brin_inclusion_add_value" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geom3d_brin_inclusion_add_value]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geom4d_brin_inclusion_add_value" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geom4d_brin_inclusion_add_value]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geometry_from_geography]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_above" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_above_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_analyze" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_analyze_nd]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_below" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_below_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_cmp" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[lwgeom_cmp]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_contained_by_raster" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[select $1 OPERATOR(public.@) $2::geometry]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_contains" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_contains_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_distance_box" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_distance_box_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_distance_centroid" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[distance]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_distance_centroid_nd" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_distance_nd]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_distance_cpa" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[ST_DistanceCPA]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_eq" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[lwgeom_eq]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_ge" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[lwgeom_ge]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_compress_2d" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_compress_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_compress_nd" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_compress]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_consistent_2d" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_consistent_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_consistent_nd" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_consistent]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_decompress_2d" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_decompress_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_decompress_nd" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_decompress]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_distance_2d" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_distance_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_distance_nd" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_distance]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_penalty_2d" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_penalty_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_penalty_nd" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_penalty]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_picksplit_2d" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_picksplit_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_picksplit_nd" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_picksplit]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_same_2d" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_same_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_same_nd" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_same]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_union_2d" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_union_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_union_nd" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_union]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_gt" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[lwgeom_gt]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_in" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOM_in]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_le" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[lwgeom_le]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_left" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_left_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_lt" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[lwgeom_lt]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_out" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOM_out]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_overabove" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_overabove_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_overbelow" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_overbelow_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_overlaps" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_overlaps_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_overlaps_nd" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_overlaps]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_overleft" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_overleft_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_overright" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_overright_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_raster_contain" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[select $1 OPERATOR(public.~) $2::geometry]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_raster_overlap" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[select $1 OPERATOR(public.&&) $2::geometry]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_recv" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOM_recv]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_right" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_right_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_same" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_same_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_send" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOM_send]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_typmod_in" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geometry_typmod_in]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_typmod_out" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[postgis_typmod_out]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_within" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_within_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometrytype" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOM_getTYPE]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geomfromewkb" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOMFromEWKB]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geomfromewkt" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[parse_WKT_lwgeom]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="get_proj4_from_srid" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
BEGIN
	RETURN proj4text::text FROM public.spatial_ref_sys WHERE srid= $1;
END;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="gettransactionid" returnType="xid" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[getTransactionID]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gidx_in" returnType="gidx" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gidx_in]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gidx_out" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gidx_out]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="gserialized_gist_joinsel_2d" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_joinsel_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="gserialized_gist_joinsel_nd" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_joinsel_nd]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="gserialized_gist_sel_2d" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_sel_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="gserialized_gist_sel_nd" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gist_sel_nd]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="is_contained_2d" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_within_box2df_geom_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="lockrow" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[ 
DECLARE
	myschema alias for $1;
	mytable alias for $2;
	myrid   alias for $3;
	authid alias for $4;
	expires alias for $5;
	ret int;
	mytoid oid;
	myrec RECORD;
	
BEGIN

	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	EXECUTE 'DELETE FROM authorization_table WHERE expires < now()'; 

	SELECT c.oid INTO mytoid FROM pg_class c, pg_namespace n
		WHERE c.relname = mytable
		AND c.relnamespace = n.oid
		AND n.nspname = myschema;

	-- RAISE NOTICE 'toid: %', mytoid;

	FOR myrec IN SELECT * FROM authorization_table WHERE 
		toid = mytoid AND rid = myrid
	LOOP
		IF myrec.authid != authid THEN
			RETURN 0;
		ELSE
			RETURN 1;
		END IF;
	END LOOP;

	EXECUTE 'INSERT INTO authorization_table VALUES ('||
		quote_literal(mytoid::text)||','||quote_literal(myrid)||
		','||quote_literal(expires::text)||
		','||quote_literal(authid) ||')';

	GET DIAGNOSTICS ret = ROW_COUNT;

	RETURN ret;
END;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="longtransactionsenabled" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[ 
DECLARE
	rec RECORD;
BEGIN
	FOR rec IN SELECT oid FROM pg_class WHERE relname = 'authorized_tables'
	LOOP
		return 't';
	END LOOP;
	return 'f';
END;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="overlaps_2d" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_overlaps_box2df_geom_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="overlaps_geog" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gidx_geog_overlaps]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="overlaps_nd" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[gserialized_gidx_geom_overlaps]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="path" returnType="path" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geometry_to_path]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_abs_in" returnType="pgis_abs" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[pgis_abs_in]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_abs_out" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[pgis_abs_out]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asgeobuf_finalfn" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[pgis_asgeobuf_finalfn]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asgeobuf_transfn" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[pgis_asgeobuf_transfn]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asmvt_finalfn" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[pgis_asmvt_finalfn]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asmvt_transfn" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[pgis_asmvt_transfn]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_accum_finalfn" returnType="ARRAY" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[pgis_geometry_accum_finalfn]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_accum_transfn" returnType="pgis_abs" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[pgis_geometry_accum_transfn]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_clusterintersecting_finalfn" returnType="ARRAY" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[pgis_geometry_clusterintersecting_finalfn]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_clusterwithin_finalfn" returnType="ARRAY" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[pgis_geometry_clusterwithin_finalfn]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_collect_finalfn" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[pgis_geometry_collect_finalfn]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_makeline_finalfn" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[pgis_geometry_makeline_finalfn]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_polygonize_finalfn" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[pgis_geometry_polygonize_finalfn]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_union_finalfn" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[pgis_geometry_union_finalfn]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="point" returnType="point" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geometry_to_point]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="polygon" returnType="polygon" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geometry_to_polygon]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="populate_geometry_columns" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: relation_oid, use_typmod=true - Ensures geometry columns are defined with type modifiers or have appropriate spatial constraints This ensures they will be registered correctly in geometry_columns view. By default will convert all geometry columns with no type modifier to ones with type modifiers. To get old behavior set use_typmod=false]]></comment>
         <definition language="PLPGSQL"><![CDATA[
DECLARE
	inserted    integer;
	oldcount    integer;
	probed      integer;
	stale       integer;
	gcs         RECORD;
	gc          RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;

BEGIN
	SELECT count(*) INTO oldcount FROM public.geometry_columns;
	inserted := 0;

	-- Count the number of geometry columns in all tables and views
	SELECT count(DISTINCT c.oid) INTO probed
	FROM pg_class c,
		 pg_attribute a,
		 pg_type t,
		 pg_namespace n
	WHERE c.relkind IN('r','v','f')
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%' AND c.relname != 'raster_columns' ;

	-- Iterate through all non-dropped geometry columns
	RAISE DEBUG 'Processing Tables.....';

	FOR gcs IN
	SELECT DISTINCT ON (c.oid) c.oid, n.nspname, c.relname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind IN( 'r', 'f')
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%' AND c.relname != 'raster_columns'
	LOOP

		inserted := inserted + public.populate_geometry_columns(gcs.oid, use_typmod);
	END LOOP;

	IF oldcount > inserted THEN
	    stale = oldcount-inserted;
	ELSE
	    stale = 0;
	END IF;

	RETURN 'probed:' ||probed|| ' inserted:'||inserted;
END

]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_addbbox" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Add bounding box to the geometry.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_addBBOX]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="postgis_cache_bbox" returnType="trigger" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[cache_bbox]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="postgis_constraint_dims" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
SELECT  replace(split_part(s.consrc, ' = ', 2), ')', '')::integer
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%ndims(% = %';
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="postgis_constraint_srid" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
SELECT replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')::integer
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%srid(% = %';
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="postgis_constraint_type" returnType="character varying" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
SELECT  replace(split_part(s.consrc, '''', 2), ')', '')::varchar
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%geometrytype(% = %';
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_dropbbox" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Drop the bounding box cache from the geometry.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_dropBBOX]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_full_version" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Reports full postgis version and build configuration infos.]]></comment>
         <definition language="PLPGSQL"><![CDATA[
DECLARE
	libver text;
	svnver text;
	projver text;
	geosver text;
	sfcgalver text;
	cgalver text;
	gdalver text;
	libxmlver text;
	liblwgeomver text;
	dbproc text;
	relproc text;
	fullver text;
	rast_lib_ver text;
	rast_scr_ver text;
	topo_scr_ver text;
	json_lib_ver text;
	protobuf_lib_ver text;
	sfcgal_lib_ver text;
	sfcgal_scr_ver text;
	pgsql_scr_ver text;
	pgsql_ver text;
BEGIN
	SELECT public.postgis_lib_version() INTO libver;
	SELECT public.postgis_proj_version() INTO projver;
	SELECT public.postgis_geos_version() INTO geosver;
	SELECT public.postgis_libjson_version() INTO json_lib_ver;
	SELECT public.postgis_libprotobuf_version() INTO protobuf_lib_ver;
	SELECT public._postgis_scripts_pgsql_version() INTO pgsql_scr_ver;
	SELECT public._postgis_pgsql_version() INTO pgsql_ver;
	BEGIN
		SELECT public.postgis_gdal_version() INTO gdalver;
	EXCEPTION
		WHEN undefined_function THEN
			gdalver := NULL;
			RAISE NOTICE 'Function postgis_gdal_version() not found.  Is raster support enabled and rtpostgis.sql installed?';
	END;
	BEGIN
		SELECT public.postgis_sfcgal_version() INTO sfcgalver;
    BEGIN
      SELECT public.postgis_sfcgal_scripts_installed() INTO sfcgal_scr_ver;
    EXCEPTION
      WHEN undefined_function THEN
        sfcgal_scr_ver := 'missing';
    END;
	EXCEPTION
		WHEN undefined_function THEN
			sfcgalver := NULL;
	END;
	SELECT public.postgis_liblwgeom_version() INTO liblwgeomver;
	SELECT public.postgis_libxml_version() INTO libxmlver;
	SELECT public.postgis_scripts_installed() INTO dbproc;
	SELECT public.postgis_scripts_released() INTO relproc;
	select public.postgis_svn_version() INTO svnver;
	BEGIN
		SELECT topology.postgis_topology_scripts_installed() INTO topo_scr_ver;
	EXCEPTION
		WHEN undefined_function OR invalid_schema_name THEN
			topo_scr_ver := NULL;
			RAISE DEBUG 'Function postgis_topology_scripts_installed() not found. Is topology support enabled and topology.sql installed?';
		WHEN insufficient_privilege THEN
			RAISE NOTICE 'Topology support cannot be inspected. Is current user granted USAGE on schema "topology" ?';
		WHEN OTHERS THEN
			RAISE NOTICE 'Function postgis_topology_scripts_installed() could not be called: % (%)', SQLERRM, SQLSTATE;
	END;

	BEGIN
		SELECT postgis_raster_scripts_installed() INTO rast_scr_ver;
	EXCEPTION
		WHEN undefined_function THEN
			rast_scr_ver := NULL;
			RAISE NOTICE 'Function postgis_raster_scripts_installed() not found. Is raster support enabled and rtpostgis.sql installed?';
	END;

	BEGIN
		SELECT public.postgis_raster_lib_version() INTO rast_lib_ver;
	EXCEPTION
		WHEN undefined_function THEN
			rast_lib_ver := NULL;
			RAISE NOTICE 'Function postgis_raster_lib_version() not found. Is raster support enabled and rtpostgis.sql installed?';
	END;

	fullver = 'POSTGIS="' || libver;

	IF  svnver IS NOT NULL THEN
		fullver = fullver || ' r' || svnver;
	END IF;

	fullver = fullver || '"';

	IF liblwgeomver != relproc THEN
		fullver = fullver || ' (liblwgeom version mismatch: "' || liblwgeomver || '")';
	END IF;

	fullver = fullver || ' PGSQL="' || pgsql_scr_ver || '"';
	IF pgsql_scr_ver != pgsql_ver THEN
		fullver = fullver || ' (procs need upgrade for use with "' || pgsql_ver || '")';
	END IF;

	IF  geosver IS NOT NULL THEN
		fullver = fullver || ' GEOS="' || geosver || '"';
	END IF;

	IF  sfcgalver IS NOT NULL THEN
		fullver = fullver || ' SFCGAL="' || sfcgalver || '"';
	END IF;

	IF  projver IS NOT NULL THEN
		fullver = fullver || ' PROJ="' || projver || '"';
	END IF;

	IF  gdalver IS NOT NULL THEN
		fullver = fullver || ' GDAL="' || gdalver || '"';
	END IF;

	IF  libxmlver IS NOT NULL THEN
		fullver = fullver || ' LIBXML="' || libxmlver || '"';
	END IF;

	IF json_lib_ver IS NOT NULL THEN
		fullver = fullver || ' LIBJSON="' || json_lib_ver || '"';
	END IF;

	IF protobuf_lib_ver IS NOT NULL THEN
		fullver = fullver || ' LIBPROTOBUF="' || protobuf_lib_ver || '"';
	END IF;

	-- fullver = fullver || ' DBPROC="' || dbproc || '"';
	-- fullver = fullver || ' RELPROC="' || relproc || '"';

	IF dbproc != relproc THEN
		fullver = fullver || ' (core procs from "' || dbproc || '" need upgrade)';
	END IF;

	IF topo_scr_ver IS NOT NULL THEN
		fullver = fullver || ' TOPOLOGY';
		IF topo_scr_ver != relproc THEN
			fullver = fullver || ' (topology procs from "' || topo_scr_ver || '" need upgrade)';
		END IF;
	END IF;

	IF rast_lib_ver IS NOT NULL THEN
		fullver = fullver || ' RASTER';
		IF rast_lib_ver != relproc THEN
			fullver = fullver || ' (raster lib from "' || rast_lib_ver || '" need upgrade)';
		END IF;
	END IF;

	IF rast_scr_ver IS NOT NULL AND rast_scr_ver != relproc THEN
		fullver = fullver || ' (raster procs from "' || rast_scr_ver || '" need upgrade)';
	END IF;

	IF sfcgal_scr_ver IS NOT NULL AND sfcgal_scr_ver != relproc THEN
    fullver = fullver || ' (sfcgal procs from "' || sfcgal_scr_ver || '" need upgrade)';
	END IF;

	RETURN fullver;
END
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_gdal_version" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Reports the version of the GDAL library in use by PostGIS.]]></comment>
         <definition language="C"><![CDATA[RASTER_gdal_version]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_geos_version" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Returns the version number of the GEOS library.]]></comment>
         <definition language="C"><![CDATA[postgis_geos_version]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_getbbox" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOM_to_BOX2DF]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_hasbbox" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Returns TRUE if the bbox of this geometry is cached, FALSE otherwise.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_hasBBOX]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_lib_build_date" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Returns build date of the PostGIS library.]]></comment>
         <definition language="C"><![CDATA[postgis_lib_build_date]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_lib_version" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Returns the version number of the PostGIS library.]]></comment>
         <definition language="C"><![CDATA[postgis_lib_version]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_libjson_version" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[postgis_libjson_version]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_liblwgeom_version" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Returns the version number of the liblwgeom library. This should match the version of PostGIS.]]></comment>
         <definition language="C"><![CDATA[postgis_liblwgeom_version]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_libprotobuf_version" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[postgis_libprotobuf_version]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_libxml_version" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Returns the version number of the libxml2 library.]]></comment>
         <definition language="C"><![CDATA[postgis_libxml_version]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="postgis_noop" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_noop]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_proj_version" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Returns the version number of the PROJ4 library.]]></comment>
         <definition language="C"><![CDATA[postgis_proj_version]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_raster_lib_build_date" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Reports full raster library build date.]]></comment>
         <definition language="C"><![CDATA[RASTER_lib_build_date]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_raster_lib_version" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Reports full raster version and build configuration infos.]]></comment>
         <definition language="C"><![CDATA[RASTER_lib_version]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_raster_scripts_installed" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT '2.4.1'::text || ' r' || 16012::text AS version ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_scripts_build_date" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Returns build date of the PostGIS scripts.]]></comment>
         <definition language="SQL"><![CDATA[SELECT '2017-10-18 22:04:11'::text AS version]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_scripts_installed" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Returns version of the postgis scripts installed in this database.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT '2.4.1'::text || ' r' || 16012::text AS version ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_scripts_released" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Returns the version number of the postgis.sql script released with the installed postgis lib.]]></comment>
         <definition language="C"><![CDATA[postgis_scripts_released]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_svn_version" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[postgis_svn_version]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_transform_geometry" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[transform_geom]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_type_name" returnType="character varying" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
 SELECT CASE WHEN $3 THEN new_name ELSE old_name END As geomname
	FROM
 	( VALUES
 		 ('GEOMETRY', 'Geometry', 2) ,
 		 	('GEOMETRY', 'GeometryZ', 3) ,
 		 	('GEOMETRY', 'GeometryZM', 4) ,
			('GEOMETRYCOLLECTION', 'GeometryCollection', 2) ,
			('GEOMETRYCOLLECTION', 'GeometryCollectionZ', 3) ,
			('GEOMETRYCOLLECTIONM', 'GeometryCollectionM', 3) ,
			('GEOMETRYCOLLECTION', 'GeometryCollectionZM', 4) ,

			('POINT', 'Point',2) ,
			('POINTM','PointM',3) ,
			('POINT', 'PointZ',3) ,
			('POINT', 'PointZM',4) ,

			('MULTIPOINT','MultiPoint',2) ,
			('MULTIPOINT','MultiPointZ',3) ,
			('MULTIPOINTM','MultiPointM',3) ,
			('MULTIPOINT','MultiPointZM',4) ,

			('POLYGON', 'Polygon',2) ,
			('POLYGON', 'PolygonZ',3) ,
			('POLYGONM', 'PolygonM',3) ,
			('POLYGON', 'PolygonZM',4) ,

			('MULTIPOLYGON', 'MultiPolygon',2) ,
			('MULTIPOLYGON', 'MultiPolygonZ',3) ,
			('MULTIPOLYGONM', 'MultiPolygonM',3) ,
			('MULTIPOLYGON', 'MultiPolygonZM',4) ,

			('MULTILINESTRING', 'MultiLineString',2) ,
			('MULTILINESTRING', 'MultiLineStringZ',3) ,
			('MULTILINESTRINGM', 'MultiLineStringM',3) ,
			('MULTILINESTRING', 'MultiLineStringZM',4) ,

			('LINESTRING', 'LineString',2) ,
			('LINESTRING', 'LineStringZ',3) ,
			('LINESTRINGM', 'LineStringM',3) ,
			('LINESTRING', 'LineStringZM',4) ,

			('CIRCULARSTRING', 'CircularString',2) ,
			('CIRCULARSTRING', 'CircularStringZ',3) ,
			('CIRCULARSTRINGM', 'CircularStringM',3) ,
			('CIRCULARSTRING', 'CircularStringZM',4) ,

			('COMPOUNDCURVE', 'CompoundCurve',2) ,
			('COMPOUNDCURVE', 'CompoundCurveZ',3) ,
			('COMPOUNDCURVEM', 'CompoundCurveM',3) ,
			('COMPOUNDCURVE', 'CompoundCurveZM',4) ,

			('CURVEPOLYGON', 'CurvePolygon',2) ,
			('CURVEPOLYGON', 'CurvePolygonZ',3) ,
			('CURVEPOLYGONM', 'CurvePolygonM',3) ,
			('CURVEPOLYGON', 'CurvePolygonZM',4) ,

			('MULTICURVE', 'MultiCurve',2 ) ,
			('MULTICURVE', 'MultiCurveZ',3 ) ,
			('MULTICURVEM', 'MultiCurveM',3 ) ,
			('MULTICURVE', 'MultiCurveZM',4 ) ,

			('MULTISURFACE', 'MultiSurface', 2) ,
			('MULTISURFACE', 'MultiSurfaceZ', 3) ,
			('MULTISURFACEM', 'MultiSurfaceM', 3) ,
			('MULTISURFACE', 'MultiSurfaceZM', 4) ,

			('POLYHEDRALSURFACE', 'PolyhedralSurface',2) ,
			('POLYHEDRALSURFACE', 'PolyhedralSurfaceZ',3) ,
			('POLYHEDRALSURFACEM', 'PolyhedralSurfaceM',3) ,
			('POLYHEDRALSURFACE', 'PolyhedralSurfaceZM',4) ,

			('TRIANGLE', 'Triangle',2) ,
			('TRIANGLE', 'TriangleZ',3) ,
			('TRIANGLEM', 'TriangleM',3) ,
			('TRIANGLE', 'TriangleZM',4) ,

			('TIN', 'Tin', 2),
			('TIN', 'TinZ', 3),
			('TIN', 'TinM', 3),
			('TIN', 'TinZM', 4) )
			 As g(old_name, new_name, coord_dimension)
		WHERE (upper(old_name) = upper($1) OR upper(new_name) = upper($1))
			AND coord_dimension = $2;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_typmod_dims" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[postgis_typmod_dims]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_typmod_srid" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[postgis_typmod_srid]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_typmod_type" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[postgis_typmod_type]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_version" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Returns PostGIS version number and compile-time options.]]></comment>
         <definition language="C"><![CDATA[postgis_version]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_above" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[select $1::geometry |>> $2::geometry]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_below" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[select $1::geometry <<| $2::geometry]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_contain" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[select $1::geometry ~ $2::geometry]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_contained" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[select $1::geometry OPERATOR(public.@) $2::geometry]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_contained_by_geometry" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[select $1::geometry OPERATOR(public.@) $2]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_eq" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public.raster_hash($1) = public.raster_hash($2) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_geometry_contain" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[select $1::geometry ~ $2]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_geometry_overlap" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[select $1::geometry OPERATOR(public.&&) $2]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_hash" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="INTERNAL"><![CDATA[hashvarlena]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_in" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_in]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_left" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[select $1::geometry << $2::geometry]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_out" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_out]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_overabove" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[select $1::geometry |&> $2::geometry]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_overbelow" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[select $1::geometry &<| $2::geometry]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_overlap" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[select $1::geometry OPERATOR(public.&&) $2::geometry]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_overleft" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[select $1::public.geometry &< $2::public.geometry]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_overright" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[select $1::public.geometry &> $2::public.geometry]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_right" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[select $1::geometry >> $2::geometry]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_same" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[select $1::geometry ~= $2::geometry]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="spheroid_in" returnType="spheroid" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[ellipsoid_in]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="spheroid_out" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[ellipsoid_out]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dclosestpoint" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - Returns the 3-dimensional point on g1 that is closest to g2. This is the first point of the 3D shortest line.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_closestpoint3d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3ddfullywithin" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2, distance - Returns true if all of the 3D geometries are within the specified distance of one another.]]></comment>
         <definition language="SQL"><![CDATA[SELECT $1 OPERATOR(public.&&) public.ST_Expand($2,$3) AND $2 OPERATOR(public.&&) public.ST_Expand($1,$3) AND public._ST_3DDFullyWithin($1, $2, $3)]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3ddistance" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - For geometry type Returns the 3-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units.]]></comment>
         <definition language="C"><![CDATA[distance3d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3ddwithin" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2, distance_of_srid - For 3d (z) geometry type Returns true if two geometries 3d distance is within number of units.]]></comment>
         <definition language="SQL"><![CDATA[SELECT $1 OPERATOR(public.&&) public.ST_Expand($2,$3) AND $2 OPERATOR(public.&&) public.ST_Expand($1,$3) AND public._ST_3DDWithin($1, $2, $3)]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dextent" returnType="box3d" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: geomfield - an aggregate function that returns the box3D bounding box that bounds rows of geometries.]]></comment>
         <definition language="INTERNAL"><![CDATA[aggregate_dummy]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dintersects" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, geomB - Returns TRUE if the Geometries "spatially intersect" in 3d - only for points, linestrings, polygons, polyhedral surface (area). With SFCGAL backend enabled also supports TINS]]></comment>
         <definition language="SQL"><![CDATA[SELECT $1 OPERATOR(public.&&) $2 AND public._ST_3DIntersects($1, $2)]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dlength" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_3dlinestring - Returns the 3-dimensional or 2-dimensional length of the geometry if it is a linestring or multi-linestring.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_length_linestring]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dlength_spheroid" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._postgis_deprecate('ST_3DLength_Spheroid', 'ST_LengthSpheroid', '2.2.0');
    SELECT public.ST_LengthSpheroid($1,$2);
  ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dlongestline" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - Returns the 3-dimensional longest line between two geometries]]></comment>
         <definition language="C"><![CDATA[LWGEOM_longestline3d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dmakebox" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: point3DLowLeftBottom, point3DUpRightTop - Creates a BOX3D defined by the given 3d point geometries.]]></comment>
         <definition language="C"><![CDATA[BOX3D_construct]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dmaxdistance" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - For geometry type Returns the 3-dimensional cartesian maximum distance (based on spatial ref) between two geometries in projected units.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_maxdistance3d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dperimeter" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Returns the 3-dimensional perimeter of the geometry, if it is a polygon or multi-polygon.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_perimeter_poly]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dshortestline" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - Returns the 3-dimensional shortest line between two geometries]]></comment>
         <definition language="C"><![CDATA[LWGEOM_shortestline3d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_accum" returnType="ARRAY" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: geomfield - Aggregate. Constructs an array of geometries.]]></comment>
         <definition language="INTERNAL"><![CDATA[aggregate_dummy]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_addband" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, outdbfile, outdbindex, index=at_end, nodataval=NULL - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT  public.ST_addband($1, ARRAY[ROW(NULL, $2, $3, $4)]::addbandarg[]) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_addmeasure" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom_mline, measure_start, measure_end - Return a derived geometry with measure elements linearly interpolated between the start and end points.]]></comment>
         <definition language="C"><![CDATA[ST_AddMeasure]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_addpoint" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: linestring, point, position - Add a point to a LineString.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_addpoint]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_affine" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, a, b, d, e, xoff, yoff - Apply a 3d affine transformation to a geometry.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_affine]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxcount" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._ST_count($1, $2, $3, $4, $5) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxhistogram" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT min, max, count, percent FROM public._ST_histogram($1, $2, TRUE, $3, $4, NULL, $5) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxquantile" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._ST_quantile($1, $2, $3, TRUE, $4, $5) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxsummarystats" returnType="summarystats" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._ST_summarystats($1, $2, $3, $4) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_area" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_area]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_area2d" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOM_area_polygon]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asbinary" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, outasin=FALSE - Return the Well-Known Binary (WKB) representation of the raster.]]></comment>
         <definition language="C"><![CDATA[RASTER_to_binary]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asencodedpolyline" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, precision=5 - Returns an Encoded Polyline from a LineString geometry.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_asEncodedPolyline]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asewkb" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry with SRID meta data.]]></comment>
         <definition language="C"><![CDATA[WKBFromLWGEOM]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asewkt" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOM_asEWKT]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgdalraster" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, format, options=NULL, srid=sameassource - Return the raster tile in the designated GDAL Raster format. Raster formats are one of those supported by your compiled library. Use ST_GDALDrivers() to get a list of formats supported by your library.]]></comment>
         <definition language="C"><![CDATA[RASTER_asGDALRaster]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgeobuf" returnType="bytea" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: row, geom_name - Return a Geobuf representation of a set of rows.]]></comment>
         <definition language="INTERNAL"><![CDATA[aggregate_dummy]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgeojson" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._ST_AsGeoJson(1, $1::public.geometry,15,0);  ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgml" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._ST_AsGML(2,$1::public.geometry,15,0, NULL, NULL);  ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_ashexewkb" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Returns a Geometry in HEXEWKB format (as text) using either little-endian (NDR) or big-endian (XDR) encoding.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_asHEXEWKB]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asjpeg" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nbands, quality - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.]]></comment>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		rast2 raster;
		num_bands int;
		i int;
	BEGIN
		IF rast IS NULL THEN
			RETURN NULL;
		END IF;

		num_bands := st_numbands($1);

		-- JPEG allows 1 or 3 bands
		IF num_bands <> 1 AND num_bands <> 3 THEN
			RAISE NOTICE 'The JPEG format only permits one or three bands.  The first band will be used.';
			rast2 := st_band(rast, ARRAY[1]);
			num_bands := st_numbands(rast);
		ELSE
			rast2 := rast;
		END IF;

		-- JPEG only supports 8BUI pixeltype
		FOR i IN 1..num_bands LOOP
			IF public.ST_BandPixelType(rast, i) != '8BUI' THEN
				RAISE EXCEPTION 'The pixel type of band % in the raster is not 8BUI.  The JPEG format can only be used with the 8BUI pixel type.', i;
			END IF;
		END LOOP;

		RETURN st_asgdalraster(rast2, 'JPEG', $2, NULL);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_askml" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[SELECT public._ST_AsKML(2, $1, $2, null)]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_aslatlontext" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: pt, format=' - Return the Degrees, Minutes, Seconds representation of the given point.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_to_latlon]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asmvt" returnType="bytea" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: row, name, extent, geom_name - Return a Mapbox Vector Tile representation of a set of rows.]]></comment>
         <definition language="INTERNAL"><![CDATA[aggregate_dummy]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asmvtgeom" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, bounds, extent=4096, buffer=256, clip_geom=true - Transform a geometry into the coordinate space of a Mapbox Vector Tile.]]></comment>
         <definition language="C"><![CDATA[ST_AsMVTGeom]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_aspect" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public.ST_aspect($1, $2, NULL::raster, $3, $4, $5) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_aspng" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nbands, options=NULL - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.]]></comment>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		rast2 raster;
		num_bands int;
		i int;
		pt text;
	BEGIN
		IF rast IS NULL THEN
			RETURN NULL;
		END IF;

		num_bands := st_numbands($1);

		-- PNG allows 1, 3 or 4 bands
		IF num_bands <> 1 AND num_bands <> 3 AND num_bands <> 4 THEN
			RAISE NOTICE 'The PNG format only permits one, three or four bands.  The first band will be used.';
			rast2 := public.st_band($1, ARRAY[1]);
			num_bands := public.st_numbands(rast2);
		ELSE
			rast2 := rast;
		END IF;

		-- PNG only supports 8BUI and 16BUI pixeltype
		FOR i IN 1..num_bands LOOP
			pt = public.ST_BandPixelType(rast, i);
			IF pt != '8BUI' AND pt != '16BUI' THEN
				RAISE EXCEPTION 'The pixel type of band % in the raster is not 8BUI or 16BUI.  The PNG format can only be used with 8BUI and 16BUI pixel types.', i;
			END IF;
		END LOOP;

		RETURN public.st_asgdalraster(rast2, 'PNG', $2, NULL);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asraster" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, width, height, pixeltype, value=ARRAY[1], nodataval=ARRAY[0], upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT public._ST_asraster($1, $2, $3, NULL, NULL, ARRAY[$6]::text[], ARRAY[$7]::double precision[], ARRAY[$8]::double precision[], NULL, NULL, $4, $5, $9, $10, $11) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_assvg" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_as_svg]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_astext" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOM_asText]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_astiff" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nbands, options, srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified, then will try to use all bands.]]></comment>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		compression2 text;
		c_type text;
		c_level int;
		i int;
		num_bands int;
		options text[];
	BEGIN
		IF rast IS NULL THEN
			RETURN NULL;
		END IF;

		compression2 := trim(both from upper(compression));

		IF length(compression2) > 0 THEN
			-- JPEG
			IF position('JPEG' in compression2) != 0 THEN
				c_type := 'JPEG';
				c_level := substring(compression2 from '[0-9]+$');

				IF c_level IS NOT NULL THEN
					IF c_level > 100 THEN
						c_level := 100;
					ELSEIF c_level < 1 THEN
						c_level := 1;
					END IF;

					options := array_append(options, 'JPEG_QUALITY=' || c_level);
				END IF;

				-- per band pixel type check
				num_bands := st_numbands($1);
				FOR i IN 1..num_bands LOOP
					IF public.ST_BandPixelType($1, i) != '8BUI' THEN
						RAISE EXCEPTION 'The pixel type of band % in the raster is not 8BUI.  JPEG compression can only be used with the 8BUI pixel type.', i;
					END IF;
				END LOOP;

			-- DEFLATE
			ELSEIF position('DEFLATE' in compression2) != 0 THEN
				c_type := 'DEFLATE';
				c_level := substring(compression2 from '[0-9]+$');

				IF c_level IS NOT NULL THEN
					IF c_level > 9 THEN
						c_level := 9;
					ELSEIF c_level < 1 THEN
						c_level := 1;
					END IF;

					options := array_append(options, 'ZLEVEL=' || c_level);
				END IF;

			ELSE
				c_type := compression2;

				-- CCITT
				IF position('CCITT' in compression2) THEN
					-- per band pixel type check
					num_bands := st_numbands($1);
					FOR i IN 1..num_bands LOOP
						IF public.ST_BandPixelType($1, i) != '1BB' THEN
							RAISE EXCEPTION 'The pixel type of band % in the raster is not 1BB.  CCITT compression can only be used with the 1BB pixel type.', i;
						END IF;
					END LOOP;
				END IF;

			END IF;

			-- compression type check
			IF ARRAY[c_type] <@ ARRAY['JPEG', 'LZW', 'PACKBITS', 'DEFLATE', 'CCITTRLE', 'CCITTFAX3', 'CCITTFAX4', 'NONE'] THEN
				options := array_append(options, 'COMPRESS=' || c_type);
			ELSE
				RAISE NOTICE 'Unknown compression type: %.  The outputted TIFF will not be COMPRESSED.', c_type;
			END IF;
		END IF;

		RETURN st_astiff($1, options, $3);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_astwkb" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geometries, unique_ids, decimaldigits_xy=0, decimaldigits_z=0, decimaldigits_m=0, include_sizes=false, include_bounding_boxes=false - Returns the geometry as TWKB, aka "Tiny Well-Known Binary"]]></comment>
         <definition language="C"><![CDATA[TWKBFromLWGEOM]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asx3d" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, maxdecimaldigits=15, options=0 - Returns a Geometry in X3D xml node element format: ISO-IEC-19776-1.2-X3DEncodings-XML]]></comment>
         <definition language="SQL"><![CDATA[SELECT public._ST_AsX3D(3,$1,$2,$3,'');]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_azimuth" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: pointA, pointB - Returns the north-based azimuth as the angle in radians measured clockwise from the vertical on pointA to pointB.]]></comment>
         <definition language="C"><![CDATA[geography_azimuth]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_band" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nbands, delimiter=, - Returns one or more bands of an existing raster as a new raster. Useful for building new rasters from existing rasters.]]></comment>
         <definition language="C"><![CDATA[RASTER_band]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_bandisnodata" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, forceChecking=true - Returns true if the band is filled with only nodata values.]]></comment>
         <definition language="C"><![CDATA[RASTER_bandIsNoData]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_bandmetadata" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT pixeltype, nodatavalue, isoutdb, path FROM public.ST_BandMetaData($1, ARRAY[$2]::int[]) LIMIT 1 ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_bandnodatavalue" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, bandnum=1 - Returns the value in a given band that represents no data. If no band num 1 is assumed.]]></comment>
         <definition language="C"><![CDATA[RASTER_getBandNoDataValue]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_bandpath" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, bandnum=1 - Returns system file path to a band stored in file system. If no bandnum specified, 1 is assumed.]]></comment>
         <definition language="C"><![CDATA[RASTER_getBandPath]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_bandpixeltype" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, bandnum=1 - Returns the type of pixel for given band. If no bandnum specified, 1 is assumed.]]></comment>
         <definition language="C"><![CDATA[RASTER_getBandPixelTypeName]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_bdmpolyfromtext" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT, srid - Construct a MultiPolygon given an arbitrary collection of closed linestrings as a MultiLineString text representation Well-Known text representation.]]></comment>
         <definition language="PLPGSQL"><![CDATA[
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := public.ST_MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;

	geom := public.ST_Multi(public.ST_BuildArea(mline));

	RETURN geom;
END;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_bdpolyfromtext" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT, srid - Construct a Polygon given an arbitrary collection of closed linestrings as a MultiLineString Well-Known text representation.]]></comment>
         <definition language="PLPGSQL"><![CDATA[
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := public.ST_MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;

	geom := public.ST_BuildArea(mline);

	IF GeometryType(geom) != 'POLYGON'
	THEN
		RAISE EXCEPTION 'Input returns more then a single polygon, try using BdMPolyFromText instead';
	END IF;

	RETURN geom;
END;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_boundary" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Returns the closure of the combinatorial boundary of this Geometry.]]></comment>
         <definition language="C"><![CDATA[boundary]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_boundingdiagonal" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, fits=false - Returns the diagonal of the supplied geometrys bounding box.]]></comment>
         <definition language="C"><![CDATA[ST_BoundingDiagonal]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_box2dfromgeohash" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geohash, precision=full_precision_of_geohash - Return a BOX2D from a GeoHash string.]]></comment>
         <definition language="C"><![CDATA[box2d_from_geohash]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_buffer" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[SELECT geography(ST_Transform(ST_Buffer(ST_Transform(geometry($1), public._ST_BestSRID($1)), $2), 4326))]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_buildarea" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: A - Creates an areal geometry formed by the constituent linework of given geometry]]></comment>
         <definition language="C"><![CDATA[ST_BuildArea]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_centroid" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_centroid]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_cleangeometry" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[ST_CleanGeometry]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clip" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	BEGIN
		-- short-cut if geometry's extent fully contains raster's extent
		IF (nodataval IS NULL OR array_length(nodataval, 1) < 1) AND geom ~ ST_Envelope(rast) THEN
			RETURN rast;
		END IF;

		RETURN public._ST_Clip($1, $2, $3, $4, $5);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clipbybox2d" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, box - Returns the portion of a geometry falling within a rectangle.]]></comment>
         <definition language="C"><![CDATA[ST_ClipByBox2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_closestpoint" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - Returns the 2-dimensional point on g1 that is closest to g2. This is the first point of the shortest line.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_closestpoint]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_closestpointofapproach" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: track1, track2 - Returns the measure at which points interpolated along two lines are closest.]]></comment>
         <definition language="C"><![CDATA[ST_ClosestPointOfApproach]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clusterdbscan" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, eps, minpoints - Windowing function that returns integer id for the cluster each input geometry is in based on 2D implementation of Density-based spatial clustering of applications with noise (DBSCAN) algorithm.]]></comment>
         <definition language="C"><![CDATA[ST_ClusterDBSCAN]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clusterintersecting" returnType="ARRAY" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="INTERNAL"><![CDATA[aggregate_dummy]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_clusterkmeans" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, number_of_clusters - Windowing function that returns integer id for the cluster each input geometry is in.]]></comment>
         <definition language="C"><![CDATA[ST_ClusterKMeans]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clusterwithin" returnType="ARRAY" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="INTERNAL"><![CDATA[aggregate_dummy]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_collect" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1_array - Return a specified ST_Geometry value from a collection of other geometries.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_collect]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_collectionextract" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: collection, type - Given a (multi)geometry, return a (multi)geometry consisting only of elements of the specified type.]]></comment>
         <definition language="C"><![CDATA[ST_CollectionExtract]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_collectionhomogenize" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: collection - Given a geometry collection, return the "simplest" representation of the contents.]]></comment>
         <definition language="C"><![CDATA[ST_CollectionHomogenize]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_colormap" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		_ismap boolean;
		_colormap text;
		_element text[];
	BEGIN
		_ismap := TRUE;

		-- clean colormap to see what it is
		_colormap := split_part(colormap, E'\n', 1);
		_colormap := regexp_replace(_colormap, E':+', ' ', 'g');
		_colormap := regexp_replace(_colormap, E',+', ' ', 'g');
		_colormap := regexp_replace(_colormap, E'\\t+', ' ', 'g');
		_colormap := regexp_replace(_colormap, E' +', ' ', 'g');
		_element := regexp_split_to_array(_colormap, ' ');

		-- treat as colormap
		IF (array_length(_element, 1) > 1) THEN
			_colormap := colormap;
		-- treat as keyword
		ELSE
			method := 'INTERPOLATE';
			CASE lower(trim(both from _colormap))
				WHEN 'grayscale', 'greyscale' THEN
					_colormap := '
100%   0
  0% 254
  nv 255
					';
				WHEN 'pseudocolor' THEN
					_colormap := '
100% 255   0   0 255
 50%   0 255   0 255
  0%   0   0 255 255
  nv   0   0   0   0
					';
				WHEN 'fire' THEN
					_colormap := '
  100% 243 255 221 255
93.75% 242 255 178 255
 87.5% 255 255 135 255
81.25% 255 228  96 255
   75% 255 187  53 255
68.75% 255 131   7 255
 62.5% 255  84   0 255
56.25% 255  42   0 255
   50% 255   0   0 255
43.75% 255  42   0 255
 37.5% 224  74   0 255
31.25% 183  91   0 255
   25% 140  93   0 255
18.75%  99  82   0 255
 12.5%  58  58   1 255
 6.25%  12  15   0 255
    0%   0   0   0 255
    nv   0   0   0   0
					';
				WHEN 'bluered' THEN
					_colormap := '
100.00% 165   0  33 255
 94.12% 216  21  47 255
 88.24% 247  39  53 255
 82.35% 255  61  61 255
 76.47% 255 120  86 255
 70.59% 255 172 117 255
 64.71% 255 214 153 255
 58.82% 255 241 188 255
 52.94% 255 255 234 255
 47.06% 234 255 255 255
 41.18% 188 249 255 255
 35.29% 153 234 255 255
 29.41% 117 211 255 255
 23.53%  86 176 255 255
 17.65%  61 135 255 255
 11.76%  40  87 255 255
  5.88%  24  28 247 255
  0.00%  36   0 216 255
     nv   0   0   0   0
					';
				ELSE
					RAISE EXCEPTION 'Unknown colormap keyword: %', colormap;
			END CASE;
		END IF;

		RETURN public._ST_colormap($1, $2, _colormap, $4);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_combine_bbox" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._postgis_deprecate('ST_Combine_BBox', 'ST_CombineBbox', '2.2.0');
    SELECT public.ST_CombineBbox($1,$2);
  ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_combinebbox" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[BOX3D_combine]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_concavehull" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, target_percent, allow_holes=false - The concave hull of a geometry represents a possibly concave geometry that encloses all geometries within the set. You can think of it as shrink wrapping.]]></comment>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		var_convhull geometry := public.ST_ConvexHull(param_geom);
		var_param_geom geometry := param_geom;
		var_initarea float := public.ST_Area(var_convhull);
		var_newarea float := var_initarea;
		var_div integer := 6; 
		var_tempgeom geometry;
		var_tempgeom2 geometry;
		var_cent geometry;
		var_geoms geometry[4]; 
		var_enline geometry;
		var_resultgeom geometry;
		var_atempgeoms geometry[];
		var_buf float := 1; 
	BEGIN
		-- We start with convex hull as our base
		var_resultgeom := var_convhull;

		IF param_pctconvex = 1 THEN
			return var_resultgeom;
		ELSIF public.ST_GeometryType(var_param_geom) = 'ST_Polygon' THEN -- it is as concave as it is going to get
			IF param_allow_holes THEN -- leave the holes
				RETURN var_param_geom;
			ELSE -- remove the holes
				var_resultgeom := public.ST_MakePolygon(public.ST_ExteriorRing(var_param_geom));
				RETURN var_resultgeom;
			END IF;
		END IF;
		IF public.ST_Dimension(var_resultgeom) > 1 AND param_pctconvex BETWEEN 0 and 0.98 THEN
		-- get linestring that forms envelope of geometry
			var_enline := public.ST_Boundary(public.ST_Envelope(var_param_geom));
			var_buf := public.ST_Length(var_enline)/1000.0;
			IF public.ST_GeometryType(var_param_geom) = 'ST_MultiPoint' AND public.ST_NumGeometries(var_param_geom) BETWEEN 4 and 200 THEN
			-- we make polygons out of points since they are easier to cave in.
			-- Note we limit to between 4 and 200 points because this process is slow and gets quadratically slow
				var_buf := sqrt(public.ST_Area(var_convhull)*0.8/(public.ST_NumGeometries(var_param_geom)*public.ST_NumGeometries(var_param_geom)));
				var_atempgeoms := ARRAY(SELECT geom FROM public.ST_DumpPoints(var_param_geom));
				-- 5 and 10 and just fudge factors
				var_tempgeom := public.ST_Union(ARRAY(SELECT geom
						FROM (
						-- fuse near neighbors together
						SELECT DISTINCT ON (i) i,  public.ST_Distance(var_atempgeoms[i],var_atempgeoms[j]), public.ST_Buffer(public.ST_MakeLine(var_atempgeoms[i], var_atempgeoms[j]) , var_buf*5, 'quad_segs=3') As geom
								FROM generate_series(1,array_upper(var_atempgeoms, 1)) As i
									INNER JOIN generate_series(1,array_upper(var_atempgeoms, 1)) As j
										ON (
								 NOT public.ST_Intersects(var_atempgeoms[i],var_atempgeoms[j])
									AND public.ST_DWithin(var_atempgeoms[i],var_atempgeoms[j], var_buf*10)
									)
								UNION ALL
						-- catch the ones with no near neighbors
								SELECT i, 0, public.ST_Buffer(var_atempgeoms[i] , var_buf*10, 'quad_segs=3') As geom
								FROM generate_series(1,array_upper(var_atempgeoms, 1)) As i
									LEFT JOIN generate_series(ceiling(array_upper(var_atempgeoms,1)/2)::integer,array_upper(var_atempgeoms, 1)) As j
										ON (
								 NOT public.ST_Intersects(var_atempgeoms[i],var_atempgeoms[j])
									AND public.ST_DWithin(var_atempgeoms[i],var_atempgeoms[j], var_buf*10)
									)
									WHERE j IS NULL
								ORDER BY 1, 2
							) As foo	) );
				IF public.ST_IsValid(var_tempgeom) AND public.ST_GeometryType(var_tempgeom) = 'ST_Polygon' THEN
					var_tempgeom := public.ST_ForceSFS(public.ST_Intersection(var_tempgeom, var_convhull));
					IF param_allow_holes THEN
						var_param_geom := var_tempgeom;
					ELSIF public.ST_GeometryType(var_tempgeom) = 'ST_Polygon' THEN
						var_param_geom := public.ST_MakePolygon(public.ST_ExteriorRing(var_tempgeom));
					ELSE
						var_param_geom := public.ST_ConvexHull(var_param_geom);
					END IF;
					return var_param_geom;
				ELSIF public.ST_IsValid(var_tempgeom) THEN
					var_param_geom := public.ST_ForceSFS(public.ST_Intersection(var_tempgeom, var_convhull));
				END IF;
			END IF;

			IF public.ST_GeometryType(var_param_geom) = 'ST_Polygon' THEN
				IF NOT param_allow_holes THEN
					var_param_geom := public.ST_MakePolygon(public.ST_ExteriorRing(var_param_geom));
				END IF;
				return var_param_geom;
			END IF;
            var_cent := public.ST_Centroid(var_param_geom);
            IF (public.ST_XMax(var_enline) - public.ST_XMin(var_enline) ) > var_buf AND (public.ST_YMax(var_enline) - public.ST_YMin(var_enline) ) > var_buf THEN
                    IF public.ST_Dwithin(public.ST_Centroid(var_convhull) , public.ST_Centroid(public.ST_Envelope(var_param_geom)), var_buf/2) THEN
                -- If the geometric dimension is > 1 and the object is symettric (cutting at centroid will not work -- offset a bit)
                        var_cent := public.ST_Translate(var_cent, (public.ST_XMax(var_enline) - public.ST_XMin(var_enline))/1000,  (public.ST_YMAX(var_enline) - public.ST_YMin(var_enline))/1000);
                    ELSE
                        -- uses closest point on geometry to centroid. I can't explain why we are doing this
                        var_cent := public.ST_ClosestPoint(var_param_geom,var_cent);
                    END IF;
                    IF public.ST_DWithin(var_cent, var_enline,var_buf) THEN
                        var_cent := public.ST_centroid(public.ST_Envelope(var_param_geom));
                    END IF;
                    -- break envelope into 4 triangles about the centroid of the geometry and returned the clipped geometry in each quadrant
                    FOR i in 1 .. 4 LOOP
                       var_geoms[i] := public.ST_MakePolygon(public.ST_MakeLine(ARRAY[public.ST_PointN(var_enline,i), public.ST_PointN(var_enline,i+1), var_cent, public.ST_PointN(var_enline,i)]));
                       var_geoms[i] := public.ST_ForceSFS(public.ST_Intersection(var_param_geom, public.ST_Buffer(var_geoms[i],var_buf)));
                       IF public.ST_IsValid(var_geoms[i]) THEN

                       ELSE
                            var_geoms[i] := public.ST_BuildArea(public.ST_MakeLine(ARRAY[public.ST_PointN(var_enline,i), public.ST_PointN(var_enline,i+1), var_cent, public.ST_PointN(var_enline,i)]));
                       END IF;
                    END LOOP;
                    var_tempgeom := public.ST_Union(ARRAY[public.ST_ConvexHull(var_geoms[1]), public.ST_ConvexHull(var_geoms[2]) , public.ST_ConvexHull(var_geoms[3]), public.ST_ConvexHull(var_geoms[4])]);
                    --RAISE NOTICE 'Curr vex % ', public.ST_AsText(var_tempgeom);
                    IF public.ST_Area(var_tempgeom) <= var_newarea AND public.ST_IsValid(var_tempgeom)  THEN --AND public.ST_GeometryType(var_tempgeom) ILIKE '%Polygon'

                        var_tempgeom := public.ST_Buffer(public.ST_ConcaveHull(var_geoms[1],least(param_pctconvex + param_pctconvex/var_div),true),var_buf, 'quad_segs=2');
                        FOR i IN 1 .. 4 LOOP
                            var_geoms[i] := public.ST_Buffer(public.ST_ConcaveHull(var_geoms[i],least(param_pctconvex + param_pctconvex/var_div),true), var_buf, 'quad_segs=2');
                            IF public.ST_IsValid(var_geoms[i]) Then
                                var_tempgeom := public.ST_Union(var_tempgeom, var_geoms[i]);
                            ELSE
                                RAISE NOTICE 'Not valid % %', i, public.ST_AsText(var_tempgeom);
                                var_tempgeom := public.ST_Union(var_tempgeom, public.ST_ConvexHull(var_geoms[i]));
                            END IF;
                        END LOOP;

                        --RAISE NOTICE 'Curr concave % ', public.ST_AsText(var_tempgeom);
                        IF public.ST_IsValid(var_tempgeom) THEN
                            var_resultgeom := var_tempgeom;
                        END IF;
                        var_newarea := public.ST_Area(var_resultgeom);
                    ELSIF public.ST_IsValid(var_tempgeom) THEN
                        var_resultgeom := var_tempgeom;
                    END IF;

                    IF public.ST_NumGeometries(var_resultgeom) > 1  THEN
                        var_tempgeom := public._ST_ConcaveHull(var_resultgeom);
                        IF public.ST_IsValid(var_tempgeom) AND public.ST_GeometryType(var_tempgeom) ILIKE 'ST_Polygon' THEN
                            var_resultgeom := var_tempgeom;
                        ELSE
                            var_resultgeom := public.ST_Buffer(var_tempgeom,var_buf, 'quad_segs=2');
                        END IF;
                    END IF;
                    IF param_allow_holes = false THEN
                    -- only keep exterior ring since we do not want holes
                        var_resultgeom := public.ST_MakePolygon(public.ST_ExteriorRing(var_resultgeom));
                    END IF;
                ELSE
                    var_resultgeom := public.ST_Buffer(var_resultgeom,var_buf);
                END IF;
                var_resultgeom := public.ST_ForceSFS(public.ST_Intersection(var_resultgeom, public.ST_ConvexHull(var_param_geom)));
            ELSE
                -- dimensions are too small to cut
                var_resultgeom := public._ST_ConcaveHull(var_param_geom);
            END IF;
            RETURN var_resultgeom;
	END;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_contains" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, rastB - Return true if no points of raster rastB lie in the exterior of raster rastA and at least one point of the interior of rastB lies in the interior of rastA.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_contains(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._st_contains($1, $2, $3, $4) END ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_containsproperly" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, rastB - Return true if rastB intersects the interior of rastA but not the boundary or exterior of rastA.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_containsproperly(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._st_containsproperly($1, $2, $3, $4) END ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_convexhull" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_convex_hull]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_coorddim" returnType="smallint" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Return the coordinate dimension of the ST_Geometry value.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_ndims]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_count" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastertable, rastercolumn, exclude_nodata_value - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT public._ST_count($1, $2, $3, $4, 1) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_countagg" returnType="bigint" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: rast, exclude_nodata_value - Aggregate. Returns the number of pixels in a given band of a set of rasters. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the NODATA value.]]></comment>
         <definition language="INTERNAL"><![CDATA[aggregate_dummy]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_coveredby" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_coveredby(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._st_coveredby($1, $2, $3, $4) END ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_covers" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_covers(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._st_covers($1, $2, $3, $4) END ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_cpawithin" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: track1, track2, maxdist - Returns true if the trajectories closest points of approachare within the specified distance.]]></comment>
         <definition language="C"><![CDATA[ST_CPAWithin]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_createoverview" returnType="regclass" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: tab, col, factor, algo='NearestNeighbor' - Create an reduced resolution version of a given raster coverage.]]></comment>
         <definition language="PLPGSQL"><![CDATA[
DECLARE
  sinfo RECORD; -- source info
  sql TEXT;
  ttab TEXT;
BEGIN

  -- 0. Check arguments, we need to ensure:
  --    a. Source table has a raster column with given name
  --    b. Source table has a fixed scale (or "factor" would have no meaning)
  --    c. Source table has a known extent ? (we could actually compute it)
  --    d. Source table has a fixed tile size (or "factor" would have no meaning?)
  -- # all of the above can be checked with a query to raster_columns
  sql := 'SELECT r.r_table_schema sch, r.r_table_name tab, '
      || 'r.scale_x sfx, r.scale_y sfy, r.blocksize_x tw, '
      || 'r.blocksize_y th, r.extent ext, r.srid FROM public.raster_columns r, '
      || 'pg_class c, pg_namespace n WHERE r.r_table_schema = n.nspname '
      || 'AND r.r_table_name = c.relname AND r_raster_column = $2 AND '
      || ' c.relnamespace = n.oid AND c.oid = $1'
  ;
  EXECUTE sql INTO sinfo USING tab, col;
  IF sinfo IS NULL THEN
      RAISE EXCEPTION '%.% raster column does not exist', tab::text, col;
  END IF;
  IF sinfo.sfx IS NULL or sinfo.sfy IS NULL THEN
    RAISE EXCEPTION 'cannot create overview without scale constraint, try select AddRasterConstraints(''%'', ''%'');', tab::text, col;
  END IF;
  IF sinfo.tw IS NULL or sinfo.tw IS NULL THEN
    RAISE EXCEPTION 'cannot create overview without tilesize constraint, try select AddRasterConstraints(''%'', ''%'');', tab::text, col;
  END IF;
  IF sinfo.ext IS NULL THEN
    RAISE EXCEPTION 'cannot create overview without extent constraint, try select AddRasterConstraints(''%'', ''%'');', tab::text, col;
  END IF;

  -- TODO: lookup in raster_overviews to see if there's any
  --       lower-resolution table to start from

  ttab := 'o_' || factor || '_' || sinfo.tab;
  sql := 'CREATE TABLE ' || quote_ident(sinfo.sch)
      || '.' || quote_ident(ttab)
      || ' AS SELECT ST_Retile($1, $2, $3, $4, $5, $6, $7) '
      || quote_ident(col);
  EXECUTE sql USING tab, col, sinfo.ext,
                    sinfo.sfx * factor, sinfo.sfy * factor,
                    sinfo.tw, sinfo.th, algo;

  -- TODO: optimize this using knowledge we have about
  --       the characteristics of the target column ?
  PERFORM public.AddRasterConstraints(sinfo.sch, ttab, col);

  PERFORM  public.AddOverviewConstraints(sinfo.sch, ttab, col,
                                 sinfo.sch, sinfo.tab, col, factor);

    -- return the schema as well as the table
  RETURN sinfo.sch||'.'||ttab;
END;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_crosses" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - Returns TRUE if the supplied geometries have some, but not all, interior points in common.]]></comment>
         <definition language="SQL"><![CDATA[SELECT $1 OPERATOR(public.&&) $2 AND public._ST_Crosses($1,$2)]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_curvetoline" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: curveGeom, tolerance, tolerance_type, flags - Converts a CIRCULARSTRING/CURVEPOLYGON to a LINESTRING/POLYGON]]></comment>
         <definition language="C"><![CDATA[ST_CurveToLine]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_delaunaytriangles" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, tolerance, flags - Return a Delaunay triangulation around the given input points.]]></comment>
         <definition language="C"><![CDATA[ST_DelaunayTriangles]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dfullywithin" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, rastB, distance_of_srid - Return true if rasters rastA and rastB are fully within the specified distance of each other.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT $1::geometry OPERATOR(public.&&) public.ST_Expand(public.ST_ConvexHull($3), $5) AND $3::geometry OPERATOR(public.&&) public.ST_Expand(public.ST_ConvexHull($1), $5) AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._ST_DFullyWithin(public.ST_ConvexHull($1), public.ST_Convexhull($3), $5) ELSE public._ST_DFullyWithin($1, $2, $3, $4, $5) END ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_difference" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, geomB - Returns a geometry that represents that part of geometry A that does not intersect with geometry B.]]></comment>
         <definition language="C"><![CDATA[difference]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dimension" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g - The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_dimension]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_disjoint" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, rastB - Return true if raster rastA does not spatially intersect rastB.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT CASE WHEN $2 IS NULL OR $4 IS NULL THEN public.ST_Disjoint(public.ST_ConvexHull($1), public.ST_ConvexHull($3)) ELSE NOT public._ST_intersects($1, $2, $3, $4) END ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distance" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[SELECT public._ST_Distance($1, $2, 0.0, $3)]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distance_sphere" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._postgis_deprecate('ST_Distance_Sphere', 'ST_DistanceSphere', '2.2.0');
    SELECT public.ST_DistanceSphere($1,$2);
  ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distance_spheroid" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._postgis_deprecate('ST_Distance_Spheroid', 'ST_DistanceSpheroid', '2.2.0');
    SELECT public.ST_DistanceSpheroid($1,$2,$3);
  ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distancecpa" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: track1, track2 - Returns the distance between closest points of approach in two trajectories.]]></comment>
         <definition language="C"><![CDATA[ST_DistanceCPA]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distancesphere" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomlonlatA, geomlonlatB - Returns minimum distance in meters between two lon/lat geometries. Uses a spherical earth and radius derived from the spheroid defined by the SRID. Faster than ST_DistanceSpheroid , but less accurate. PostGIS versions prior to 1.5 only implemented for points.]]></comment>
         <definition language="SQL"><![CDATA[
	select public.ST_distance( public.geography($1), public.geography($2),false)
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distancespheroid" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomlonlatA, geomlonlatB, measurement_spheroid - Returns the minimum distance between two lon/lat geometries given a particular spheroid. PostGIS versions prior to 1.5 only support points.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_distance_ellipsoid]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distinct4ma" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT COUNT(DISTINCT unnest)::double precision FROM unnest($1) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dump" returnType="SETOF geometry_dump" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Returns a set of geometry_dump (geom,path) rows, that make up a geometry g1.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_dump]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dumpaspolygons" returnType="SETOF geomval" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_dumpAsPolygons]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dumppoints" returnType="SETOF geometry_dump" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Returns a set of geometry_dump (geom,path) rows of all points that make up a geometry.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_dumppoints]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dumprings" returnType="SETOF geometry_dump" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_polygon - Returns a set of geometry_dump rows, representing the exterior and interior rings of a polygon.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_dump_rings]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dumpvalues" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, exclude_nodata_value=true - Get the values of the specified band as a 2-dimension array.]]></comment>
         <definition language="C"><![CDATA[RASTER_dumpValues]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dwithin" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT $1::geometry OPERATOR(public.&&) ST_Expand(ST_ConvexHull($3), $5) AND $3::geometry OPERATOR(public.&&) ST_Expand(ST_ConvexHull($1), $5) AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._ST_dwithin(st_convexhull($1), st_convexhull($3), $5) ELSE public._ST_dwithin($1, $2, $3, $4, $5) END ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_endpoint" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g - Returns the last point of a LINESTRING or CIRCULARLINESTRING geometry as a POINT.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_endpoint_linestring]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_envelope" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_envelope]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_equals" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: A, B - Returns true if the given geometries represent the same geometry. Directionality is ignored.]]></comment>
         <definition language="SQL"><![CDATA[SELECT $1 OPERATOR(public.~=) $2 AND public._ST_Equals($1,$2)]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_estimated_extent" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._postgis_deprecate('ST_Estimated_Extent', 'ST_EstimatedExtent', '2.1.0');
    -- We use security invoker instead of security definer
    -- to prevent malicious injection of a different same named function
    SELECT public.ST_EstimatedExtent($1, $2, $3);
  ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_estimatedextent" returnType="box2d" securityType="DEFINER" type="FUNCTION">
         <comment><![CDATA[args: table_name, geocolumn_name - Return the estimated extent of the given spatial table. The estimated is taken from the geometry columns statistics. The current schema will be used if not specified.]]></comment>
         <definition language="C"><![CDATA[gserialized_estimated_extent]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_expand" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: box, dx, dy, dz=0 - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision]]></comment>
         <definition language="C"><![CDATA[BOX3D_expand]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_extent" returnType="box2d" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: geomfield - an aggregate function that returns the bounding box that bounds rows of geometries.]]></comment>
         <definition language="INTERNAL"><![CDATA[aggregate_dummy]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_exteriorring" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_polygon - Returns a line string representing the exterior ring of the POLYGON geometry. Return NULL if the geometry is not a polygon. Will not work with MULTIPOLYGON]]></comment>
         <definition language="C"><![CDATA[LWGEOM_exteriorring_polygon]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_find_extent" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._postgis_deprecate('ST_Find_Extent', 'ST_FindExtent', '2.2.0');
    SELECT public.ST_FindExtent($1,$2,$3);
  ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_findextent" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
DECLARE
	schemaname alias for $1;
	tablename alias for $2;
	columnname alias for $3;
	myrec RECORD;
BEGIN
	FOR myrec IN EXECUTE 'SELECT public.ST_Extent("' || columnname || '") As extent FROM "' || schemaname || '"."' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_flipcoordinates" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Returns a version of the given geometry with X and Y axis flipped. Useful for people who have built latitude/longitude features and need to fix them.]]></comment>
         <definition language="C"><![CDATA[ST_FlipCoordinates]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force2d" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Force the geometries into a "2-dimensional mode".]]></comment>
         <definition language="C"><![CDATA[LWGEOM_force_2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force3d" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Force the geometries into XYZ mode. This is an alias for ST_Force3DZ.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_force_3dz]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force3dm" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Force the geometries into XYM mode.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_force_3dm]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force3dz" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Force the geometries into XYZ mode.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_force_3dz]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force4d" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Force the geometries into XYZM mode.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_force_4d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force_2d" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._postgis_deprecate('ST_Force_2d', 'ST_Force2D', '2.1.0');
    SELECT public.ST_Force2D($1);
  ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force_3d" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._postgis_deprecate('ST_Force_3d', 'ST_Force3D', '2.1.0');
    SELECT public.ST_Force3D($1);
  ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force_3dm" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._postgis_deprecate('ST_Force_3dm', 'ST_Force3DM', '2.1.0');
    SELECT public.ST_Force3DM($1);
  ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force_3dz" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._postgis_deprecate('ST_Force_3dz', 'ST_Force3DZ', '2.1.0');
    SELECT public.ST_Force3DZ($1);
  ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force_4d" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._postgis_deprecate('ST_Force_4d', 'ST_Force4D', '2.1.0');
    SELECT public.ST_Force4D($1);
  ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force_collection" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._postgis_deprecate('ST_Force_Collection', 'ST_ForceCollection', '2.1.0');
    SELECT public.ST_ForceCollection($1);
  ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_forcecollection" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Convert the geometry into a GEOMETRYCOLLECTION.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_force_collection]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_forcecurve" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g - Upcast a geometry into its curved type, if applicable.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_force_curve]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_forcepolygonccw" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Orients all exterior rings counter-clockwise and all interior rings clockwise.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT public.ST_Reverse(public.ST_ForcePolygonCW($1)) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_forcepolygoncw" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Orients all exterior rings clockwise and all interior rings counter-clockwise.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_force_clockwise_poly]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_forcerhr" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g - Force the orientation of the vertices in a polygon to follow the Right-Hand-Rule.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_force_clockwise_poly]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_forcesfs" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, version - Force the geometries to use SFS 1.1 geometry types only.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_force_sfs]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_frechetdistance" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2, densifyFrac = -1 - Returns the Fréchet distance between two geometries. This is a measure of similarity between curves that takes into account the location and ordering of the points along the curves. Units are in the units of the spatial reference system of the geometries.]]></comment>
         <definition language="C"><![CDATA[ST_FrechetDistance]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_fromgdalraster" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: gdaldata, srid=NULL - Returns a raster from a supported GDAL raster file.]]></comment>
         <definition language="C"><![CDATA[RASTER_fromGDALRaster]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_gdaldrivers" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: OUT idx, OUT short_name, OUT long_name, OUT create_options - Returns a list of raster formats supported by your lib gdal. These are the formats you can output your raster using ST_AsGDALRaster.]]></comment>
         <definition language="C"><![CDATA[RASTER_getGDALDrivers]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_generatepoints" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g, npoints - Converts a polygon or multi-polygon into a multi-point composed of randomly location points within the original areas.]]></comment>
         <definition language="C"><![CDATA[ST_GeneratePoints]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geogfromtext" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: EWKT - Return a specified geography value from Well-Known Text representation or extended (WKT).]]></comment>
         <definition language="C"><![CDATA[geography_from_text]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geogfromwkb" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: wkb - Creates a geography instance from a Well-Known Binary geometry representation (WKB) or extended Well Known Binary (EWKB).]]></comment>
         <definition language="C"><![CDATA[geography_from_binary]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geographyfromtext" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: EWKT - Return a specified geography value from Well-Known Text representation or extended (WKT).]]></comment>
         <definition language="C"><![CDATA[geography_from_text]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geohash" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[ST_GeoHash]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomcollfromtext" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT - Makes a collection Geometry from collection WKT with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
         <definition language="SQL"><![CDATA[
	SELECT CASE
	WHEN geometrytype(public.ST_GeomFromText($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN public.ST_GeomFromText($1,$2)
	ELSE NULL END
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomcollfromwkb" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT CASE
	WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geometricmedian" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: 
					g
				, 
					tolerance
				, 
					max_iter
				, 
					fail_if_not_converged
				 - Returns the geometric median of a MultiPoint.]]></comment>
         <definition language="C"><![CDATA[ST_GeometricMedian]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geometryfromtext" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT, srid - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText]]></comment>
         <definition language="C"><![CDATA[LWGEOM_from_text]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geometryn" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, n - Return the 1-based Nth geometry if the geometry is a GEOMETRYCOLLECTION, (MULTI)POINT, (MULTI)LINESTRING, MULTICURVE or (MULTI)POLYGON, POLYHEDRALSURFACE Otherwise, return NULL.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_geometryn_collection]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geometrytype" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Return the geometry type of the ST_Geometry value.]]></comment>
         <definition language="C"><![CDATA[geometry_geometrytype]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromewkb" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: EWKB - Return a specified ST_Geometry value from Extended Well-Known Binary representation (EWKB).]]></comment>
         <definition language="C"><![CDATA[LWGEOMFromEWKB]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromewkt" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: EWKT - Return a specified ST_Geometry value from Extended Well-Known Text representation (EWKT).]]></comment>
         <definition language="C"><![CDATA[parse_WKT_lwgeom]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromgeohash" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geohash, precision=full_precision_of_geohash - Return a geometry from a GeoHash string.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT CAST(public.ST_Box2dFromGeoHash($1, $2) AS geometry); ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromgeojson" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomjson - Takes as input a geojson representation of a geometry and outputs a PostGIS geometry object]]></comment>
         <definition language="C"><![CDATA[geom_from_geojson]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromgml" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomgml, srid - Takes as input GML representation of geometry and outputs a PostGIS geometry object]]></comment>
         <definition language="C"><![CDATA[geom_from_gml]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromkml" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomkml - Takes as input KML representation of geometry and outputs a PostGIS geometry object]]></comment>
         <definition language="C"><![CDATA[geom_from_kml]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromtext" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT, srid - Return a specified ST_Geometry value from Well-Known Text representation (WKT).]]></comment>
         <definition language="C"><![CDATA[LWGEOM_from_text]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromtwkb" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: twkb - Creates a geometry instance from a TWKB ("Tiny Well-Known Binary") geometry representation.]]></comment>
         <definition language="C"><![CDATA[LWGEOMFromTWKB]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromwkb" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, srid - Makes a geometry from WKB with the given SRID]]></comment>
         <definition language="C"><![CDATA[LWGEOM_from_WKB]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_georeference" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, format=GDAL - Returns the georeference meta data in GDAL or ESRI format as commonly seen in a world file. Default is GDAL.]]></comment>
         <definition language="PLPGSQL"><![CDATA[
    DECLARE
				scale_x numeric;
				scale_y numeric;
				skew_x numeric;
				skew_y numeric;
				ul_x numeric;
				ul_y numeric;

        result text;
    BEGIN
			SELECT scalex::numeric, scaley::numeric, skewx::numeric, skewy::numeric, upperleftx::numeric, upperlefty::numeric
				INTO scale_x, scale_y, skew_x, skew_y, ul_x, ul_y FROM public.ST_Metadata(rast);

						-- scale x
            result := trunc(scale_x, 10) || E'\n';

						-- skew y
            result := result || trunc(skew_y, 10) || E'\n';

						-- skew x
            result := result || trunc(skew_x, 10) || E'\n';

						-- scale y
            result := result || trunc(scale_y, 10) || E'\n';

        IF format = 'ESRI' THEN
						-- upper left x
            result := result || trunc((ul_x + scale_x * 0.5), 10) || E'\n';

						-- upper left y
            result = result || trunc((ul_y + scale_y * 0.5), 10) || E'\n';
        ELSE -- IF format = 'GDAL' THEN
						-- upper left x
            result := result || trunc(ul_x, 10) || E'\n';

						-- upper left y
            result := result || trunc(ul_y, 10) || E'\n';
        END IF;

        RETURN result;
    END;
    ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geotransform" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_getGeotransform]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_gmltosql" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomgml, srid - Return a specified ST_Geometry value from GML representation. This is an alias name for ST_GeomFromGML]]></comment>
         <definition language="SQL"><![CDATA[SELECT public._ST_GeomFromGML($1, 0)]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_hasarc" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Returns true if a geometry or geometry collection contains a circular string]]></comment>
         <definition language="C"><![CDATA[LWGEOM_has_arc]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_hasnoband" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, bandnum=1 - Returns true if there is no band with given band number. If no band number is specified, then band number 1 is assumed.]]></comment>
         <definition language="C"><![CDATA[RASTER_hasNoBand]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_hausdorffdistance" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2, densifyFrac - Returns the Hausdorff distance between two geometries. Basically a measure of how similar or dissimilar 2 geometries are. Units are in the units of the spatial reference system of the geometries.]]></comment>
         <definition language="C"><![CDATA[hausdorffdistance]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_height" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the height of the raster in pixels.]]></comment>
         <definition language="C"><![CDATA[RASTER_getHeight]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_hillshade" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;

		IF interpolate_nodata IS TRUE THEN
			_rast := public.ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;

		-- get properties
		_pixwidth := public.ST_PixelWidth(_rast);
		_pixheight := public.ST_PixelHeight(_rast);
		SELECT width, height, scalex INTO _width, _height FROM public.ST_Metadata(_rast);

		RETURN public.ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			' public._ST_hillshade4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1,
			_pixwidth::text, _pixheight::text,
			_width::text, _height::text,
			$5::text, $6::text,
			$7::text, $8::text
		);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_histogram" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastertable, rastercolumn, nband=1, bins, width=NULL, right=false - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT public._ST_histogram($1, $2, $3, $4, 1, $5, $6, $7) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_interiorringn" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_polygon, n - Return the Nth interior linestring ring of the polygon geometry. Return NULL if the geometry is not a polygon or the given N is out of range.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_interiorringn_polygon]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_interpolatepoint" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: line, point - Return the value of the measure dimension of a geometry at the point closed to the provided point.]]></comment>
         <definition language="C"><![CDATA[ST_InterpolatePoint]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersection" returnType="SETOF raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT st_intersection($1, 1, $2, 1, $3, $4) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersects" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT $1 OPERATOR(public.&&) $2::geometry AND public._st_intersects($1, $2, $3); ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_invdistweight4ma" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		_value double precision[][][];
		ndims int;

		k double precision DEFAULT 1.;
		_k double precision DEFAULT 1.;
		z double precision[];
		d double precision[];
		_d double precision;
		z0 double precision;

		_z integer;
		x integer;
		y integer;

		cx integer;
		cy integer;
		cv double precision;
		cw double precision DEFAULT NULL;

		w integer;
		h integer;
		max_dx double precision;
		max_dy double precision;
	BEGIN
--		RAISE NOTICE 'value = %', value;
--		RAISE NOTICE 'userargs = %', userargs;

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		_z := array_lower(_value, 1);

		-- width and height (0-based)
		h := array_upper(_value, 2) - array_lower(_value, 2);
		w := array_upper(_value, 3) - array_lower(_value, 3);

		-- max distance from center pixel
		max_dx := w / 2;
		max_dy := h / 2;
--		RAISE NOTICE 'max_dx, max_dy = %, %', max_dx, max_dy;

		-- correct width and height (1-based)
		w := w + 1;
		h := h + 1;
--		RAISE NOTICE 'w, h = %, %', w, h;

		-- width and height should be odd numbers
		IF w % 2. != 1 THEN
			RAISE EXCEPTION 'Width of neighborhood array does not permit for a center pixel';
		END IF;
		IF h % 2. != 1 THEN
			RAISE EXCEPTION 'Height of neighborhood array does not permit for a center pixel';
		END IF;

		-- center pixel's coordinates
		cy := max_dy + array_lower(_value, 2);
		cx := max_dx + array_lower(_value, 3);
--		RAISE NOTICE 'cx, cy = %, %', cx, cy;

		-- if userargs provided, only use the first two args
		IF userargs IS NOT NULL AND array_ndims(userargs) = 1 THEN
			-- first arg is power factor
			k := userargs[array_lower(userargs, 1)]::double precision;
			IF k IS NULL THEN
				k := _k;
			ELSEIF k < 0. THEN
				RAISE NOTICE 'Power factor (< 0) must be between 0 and 1.  Defaulting to 0';
				k := 0.;
			ELSEIF k > 1. THEN
				RAISE NOTICE 'Power factor (> 1) must be between 0 and 1.  Defaulting to 1';
				k := 1.;
			END IF;

			-- second arg is what to do if center pixel has a value
			-- this will be a weight to apply for the center pixel
			IF array_length(userargs, 1) > 1 THEN
				cw := abs(userargs[array_lower(userargs, 1) + 1]::double precision);
				IF cw IS NOT NULL THEN
					IF cw < 0. THEN
						RAISE NOTICE 'Weight (< 0) of center pixel value must be between 0 and 1.  Defaulting to 0';
						cw := 0.;
					ELSEIF cw > 1 THEN
						RAISE NOTICE 'Weight (> 1) of center pixel value must be between 0 and 1.  Defaulting to 1';
						cw := 1.;
					END IF;
				END IF;
			END IF;
		END IF;
--		RAISE NOTICE 'k = %', k;
		k = abs(k) * -1;

		-- center pixel value
		cv := _value[_z][cy][cx];

		-- check to see if center pixel has value
--		RAISE NOTICE 'cw = %', cw;
		IF cw IS NULL AND cv IS NOT NULL THEN
			RETURN cv;
		END IF;

		FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
			FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
--				RAISE NOTICE 'value[%][%][%] = %', _z, y, x, _value[_z][y][x];

				-- skip NODATA values and center pixel
				IF _value[_z][y][x] IS NULL OR (x = cx AND y = cy) THEN
					CONTINUE;
				END IF;

				z := z || _value[_z][y][x];

				-- use pythagorean theorem
				_d := sqrt(power(cx - x, 2) + power(cy - y, 2));
--				RAISE NOTICE 'distance = %', _d;

				d := d || _d;
			END LOOP;
		END LOOP;
--		RAISE NOTICE 'z = %', z;
--		RAISE NOTICE 'd = %', d;

		-- neighborhood is NODATA
		IF z IS NULL OR array_length(z, 1) < 1 THEN
			-- center pixel has value
			IF cv IS NOT NULL THEN
				RETURN cv;
			ELSE
				RETURN NULL;
			END IF;
		END IF;

		z0 := 0;
		_d := 0;
		FOR x IN array_lower(z, 1)..array_upper(z, 1) LOOP
			d[x] := power(d[x], k);
			z[x] := z[x] * d[x];
			_d := _d + d[x];
			z0 := z0 + z[x];
		END LOOP;
		z0 := z0 / _d;
--		RAISE NOTICE 'z0 = %', z0;

		-- apply weight for center pixel if center pixel has value
		IF cv IS NOT NULL THEN
			z0 := (cw * cv) + ((1 - cw) * z0);
--			RAISE NOTICE '*z0 = %', z0;
		END IF;

		RETURN z0;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isclosed" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g - Returns TRUE if the LINESTRINGs start and end points are coincident. For Polyhedral surface is closed (volumetric).]]></comment>
         <definition language="C"><![CDATA[LWGEOM_isclosed]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_iscollection" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g - Returns TRUE if the argument is a collection (MULTI*, GEOMETRYCOLLECTION, ...)]]></comment>
         <definition language="C"><![CDATA[ST_IsCollection]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_iscoveragetile" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		_rastmeta record;
		_covmeta record;
		cr record;
		max integer[];
		tile integer[];
		edge integer[];
	BEGIN
		IF NOT ST_SameAlignment(rast, coverage) THEN
			RAISE NOTICE 'Raster and coverage are not aligned';
			RETURN FALSE;
		END IF;

		_rastmeta := ST_Metadata(rast);
		_covmeta := ST_Metadata(coverage);

		-- get coverage grid coordinates of upper-left of rast
		cr := ST_WorldToRasterCoord(coverage, _rastmeta.upperleftx, _rastmeta.upperlefty);

		-- rast is not part of coverage
		IF
			(cr.columnx < 1 OR cr.columnx > _covmeta.width) OR
			(cr.rowy < 1 OR cr.rowy > _covmeta.height)
		THEN
			RAISE NOTICE 'Raster is not in the coverage';
			RETURN FALSE;
		END IF;

		-- rast isn't on the coverage's grid
		IF
			((cr.columnx - 1) % tilewidth != 0) OR
			((cr.rowy - 1) % tileheight != 0)
		THEN
			RAISE NOTICE 'Raster is not aligned to tile grid of coverage';
			RETURN FALSE;
		END IF;

		-- max # of tiles on X and Y for coverage
		max[0] := ceil(_covmeta.width::double precision / tilewidth::double precision)::integer;
		max[1] := ceil(_covmeta.height::double precision / tileheight::double precision)::integer;

		-- tile # of rast in coverge
		tile[0] := (cr.columnx / tilewidth) + 1;
		tile[1] := (cr.rowy / tileheight) + 1;

		-- inner tile
		IF tile[0] < max[0] AND tile[1] < max[1] THEN
			IF
				(_rastmeta.width != tilewidth) OR
				(_rastmeta.height != tileheight)
			THEN
				RAISE NOTICE 'Raster width/height is invalid for interior tile of coverage';
				RETURN FALSE;
			ELSE
				RETURN TRUE;
			END IF;
		END IF;

		-- edge tile

		-- edge tile may have same size as inner tile
		IF
			(_rastmeta.width = tilewidth) AND
			(_rastmeta.height = tileheight)
		THEN
			RETURN TRUE;
		END IF;

		-- get edge tile width and height
		edge[0] := _covmeta.width - ((max[0] - 1) * tilewidth);
		edge[1] := _covmeta.height - ((max[1] - 1) * tileheight);

		-- edge tile not of expected tile size
		-- right and bottom
		IF tile[0] = max[0] AND tile[1] = max[1] THEN
			IF
				_rastmeta.width != edge[0] OR
				_rastmeta.height != edge[1]
			THEN
				RAISE NOTICE 'Raster width/height is invalid for right-most AND bottom-most tile of coverage';
				RETURN FALSE;
			END IF;
		ELSEIF tile[0] = max[0] THEN
			IF
				_rastmeta.width != edge[0] OR
				_rastmeta.height != tileheight
			THEN
				RAISE NOTICE 'Raster width/height is invalid for right-most tile of coverage';
				RETURN FALSE;
			END IF;
		ELSE
			IF
				_rastmeta.width != tilewidth OR
				_rastmeta.height != edge[1]
			THEN
				RAISE NOTICE 'Raster width/height is invalid for bottom-most tile of coverage';
				RETURN FALSE;
			END IF;
		END IF;

		RETURN TRUE;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isempty" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns true if the raster is empty (width = 0 and height = 0). Otherwise, returns false.]]></comment>
         <definition language="C"><![CDATA[RASTER_isEmpty]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_ispolygonccw" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Returns true if all exterior rings are oriented counter-clockwise and all interior rings are oriented clockwise.]]></comment>
         <definition language="C"><![CDATA[ST_IsPolygonCCW]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_ispolygoncw" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Returns true if all exterior rings are oriented clockwise and all interior rings are oriented counter-clockwise.]]></comment>
         <definition language="C"><![CDATA[ST_IsPolygonCW]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isring" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g - Returns TRUE if this LINESTRING is both closed and simple.]]></comment>
         <definition language="C"><![CDATA[isring]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_issimple" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Returns (TRUE) if this Geometry has no anomalous geometric points, such as self intersection or self tangency.]]></comment>
         <definition language="C"><![CDATA[issimple]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isvalid" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g, flags - Returns true if the ST_Geometry is well formed.]]></comment>
         <definition language="C"><![CDATA[isvalid]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isvaliddetail" returnType="valid_detail" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, flags - Returns a valid_detail (valid,reason,location) row stating if a geometry is valid or not and if not valid, a reason why and a location where.]]></comment>
         <definition language="C"><![CDATA[isvaliddetail]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isvalidreason" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, flags - Returns text stating if a geometry is valid or not and if not valid, a reason why.]]></comment>
         <definition language="C"><![CDATA[isvalidreason]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isvalidtrajectory" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: line - Returns true if the geometry is a valid trajectory.]]></comment>
         <definition language="C"><![CDATA[ST_IsValidTrajectory]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_length" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[geography_length]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_length2d" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_2dlinestring - Returns the 2-dimensional length of the geometry if it is a linestring or multi-linestring. This is an alias for ST_Length]]></comment>
         <definition language="C"><![CDATA[LWGEOM_length2d_linestring]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_length2d_spheroid" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_geometry, a_spheroid - Calculates the 2D length/perimeter of a geometry on an ellipsoid. This is useful if the coordinates of the geometry are in longitude/latitude and a length is desired without reprojection.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT public._postgis_deprecate('ST_Length2D_Spheroid', 'ST_Length2DSpheroid', '2.2.0');
    SELECT public.ST_Length2DSpheroid($1,$2);
  ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_length2dspheroid" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOM_length2d_ellipsoid]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_length_spheroid" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._postgis_deprecate('ST_Length_Spheroid', 'ST_LengthSpheroid', '2.2.0');
    SELECT public.ST_LengthSpheroid($1,$2);
  ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_lengthspheroid" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_geometry, a_spheroid - Calculates the 2D or 3D length/perimeter of a geometry on an ellipsoid. This is useful if the coordinates of the geometry are in longitude/latitude and a length is desired without reprojection.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_length_ellipsoid_linestring]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_line_interpolate_point" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._postgis_deprecate('ST_Line_Interpolate_Point', 'ST_LineInterpolatePoint', '2.1.0');
    SELECT public.ST_LineInterpolatePoint($1, $2);
  ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_line_locate_point" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._postgis_deprecate('ST_Line_Locate_Point', 'ST_LineLocatePoint', '2.1.0');
     SELECT public.ST_LineLocatePoint($1, $2);
  ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_line_substring" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._postgis_deprecate('ST_Line_Substring', 'ST_LineSubstring', '2.1.0');
     SELECT public.ST_LineSubstring($1, $2, $3);
  ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linecrossingdirection" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: linestringA, linestringB - Given 2 linestrings, returns a number between -3 and 3 denoting what kind of crossing behavior. 0 is no crossing.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT CASE WHEN NOT $1 OPERATOR(public.&&) $2 THEN 0 ELSE public._ST_LineCrossingDirection($1,$2) END ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linefromencodedpolyline" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: polyline, precision=5 - Creates a LineString from an Encoded Polyline.]]></comment>
         <definition language="C"><![CDATA[line_from_encoded_polyline]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linefrommultipoint" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: aMultiPoint - Creates a LineString from a MultiPoint geometry.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_line_from_mpoint]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linefromtext" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT, srid - Makes a Geometry from WKT representation with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
         <definition language="SQL"><![CDATA[
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'LINESTRING'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linefromwkb" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKB, srid - Makes a LINESTRING from WKB with the given SRID]]></comment>
         <definition language="SQL"><![CDATA[
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_lineinterpolatepoint" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_linestring, a_fraction - Returns a point interpolated along a line. Second argument is a float8 between 0 and 1 representing fraction of total length of linestring the point has to be located.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_line_interpolate_point]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linelocatepoint" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_linestring, a_point - Returns a float between 0 and 1 representing the location of the closest point on LineString to the given Point, as a fraction of total 2d line length.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_line_locate_point]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linemerge" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: amultilinestring - Return a (set of) LineString(s) formed by sewing together a MULTILINESTRING.]]></comment>
         <definition language="C"><![CDATA[linemerge]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linestringfromwkb" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKB, srid - Makes a geometry from WKB with the given SRID.]]></comment>
         <definition language="SQL"><![CDATA[
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linesubstring" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_linestring, startfraction, endfraction - Return a linestring being a substring of the input one starting and ending at the given fractions of total 2d length. Second and third arguments are float8 values between 0 and 1.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_line_substring]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linetocurve" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomANoncircular - Converts a LINESTRING/POLYGON to a CIRCULARSTRING, CURVEPOLYGON]]></comment>
         <definition language="C"><![CDATA[LWGEOM_line_desegmentize]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_locate_along_measure" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public.ST_locate_between_measures($1, $2, $2) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_locate_between_measures" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOM_locate_between_m]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_locatealong" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: ageom_with_measure, a_measure, offset - Return a derived geometry collection value with elements that match the specified measure. Polygonal elements are not supported.]]></comment>
         <definition language="C"><![CDATA[ST_LocateAlong]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_locatebetween" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, measure_start, measure_end, offset - Return a derived geometry collection value with elements that match the specified range of measures inclusively. Polygonal elements are not supported.]]></comment>
         <definition language="C"><![CDATA[ST_LocateBetween]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_locatebetweenelevations" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom_mline, elevation_start, elevation_end - Return a derived geometry (collection) value with elements that intersect the specified range of elevations inclusively. Only 3D, 4D LINESTRINGS and MULTILINESTRINGS are supported.]]></comment>
         <definition language="C"><![CDATA[ST_LocateBetweenElevations]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_longestline" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - Returns the 2-dimensional longest line points of two geometries. The function will only return the first longest line if more than one, that the function finds. The line returned will always start in g1 and end in g2. The length of the line this function returns will always be the same as st_maxdistance returns for g1 and g2.]]></comment>
         <definition language="SQL"><![CDATA[SELECT public._ST_LongestLine(public.ST_ConvexHull($1), public.ST_ConvexHull($2))]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_m" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_point - Return the M coordinate of the point, or NULL if not available. Input must be a point.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_m_point]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makebox2d" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: pointLowLeft, pointUpRight - Creates a BOX2D defined by the given point geometries.]]></comment>
         <definition language="C"><![CDATA[BOX2D_construct]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makeemptycoverage" returnType="SETOF raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: tilewidth, tileheight, width, height, upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid=unknown - Cover georeferenced area with a grid of empty raster tiles.]]></comment>
         <definition language="PLPGSQL"><![CDATA[
    DECLARE
        ulx double precision;  -- upper left x of raster
        uly double precision;  -- upper left y of raster
        rw int;                -- raster width (may change at edges)
        rh int;                -- raster height (may change at edges)
        x int;                 -- x index of coverage
        y int;                 -- y index of coverage
        template raster;       -- an empty template raster, where each cell
                               -- represents a tile in the coverage
        minY double precision;
        maxX double precision;
    BEGIN
        template := public.ST_MakeEmptyRaster(
            ceil(width::float8/tilewidth)::int,
            ceil(height::float8/tileheight)::int,
            upperleftx,
            upperlefty,
            tilewidth * scalex,
            tileheight * scaley,
            tileheight * skewx,
            tilewidth * skewy,
            srid
        );

        FOR y IN 1..st_height(template) LOOP
            maxX := public.ST_RasterToWorldCoordX(template, 1, y) + width * scalex;
            FOR x IN 1..st_width(template) LOOP
                minY := public.ST_RasterToWorldCoordY(template, x, 1) + height * scaley;
                uly := public.ST_RasterToWorldCoordY(template, x, y);
                IF uly + (tileheight * scaley) < minY THEN
                    --raise notice 'uly, minY: %, %', uly, minY;
                    rh := ceil((minY - uly)/scaleY)::int;
                ELSE
                    rh := tileheight;
                END IF;

                ulx := public.ST_RasterToWorldCoordX(template, x, y);
                IF ulx + (tilewidth * scalex) > maxX THEN
                    --raise notice 'ulx, maxX: %, %', ulx, maxX;
                    rw := ceil((maxX - ulx)/scaleX)::int;
                ELSE
                    rw := tilewidth;
                END IF;

                RETURN NEXT public.ST_MakeEmptyRaster(rw, rh, ulx, uly, scalex, scaley, skewx, skewy, srid);
            END LOOP;
        END LOOP;
    END;
    ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makeemptyraster" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: width, height, upperleftx, upperlefty, pixelsize - Returns an empty raster (having no bands) of given dimensions (width & height), upperleft X and Y, pixel size and rotation (scalex, scaley, skewx & skewy) and reference system (srid). If a raster is passed in, returns a new raster with the same size, alignment and SRID. If srid is left out, the spatial ref is set to unknown (0).]]></comment>
         <definition language="C"><![CDATA[RASTER_makeEmpty]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makeenvelope" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: xmin, ymin, xmax, ymax, srid=unknown - Creates a rectangular Polygon formed from the given minimums and maximums. Input values must be in SRS specified by the SRID.]]></comment>
         <definition language="C"><![CDATA[ST_MakeEnvelope]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makeline" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geoms_array - Creates a Linestring from point, multipoint, or line geometries.]]></comment>
         <definition language="INTERNAL"><![CDATA[aggregate_dummy]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makepoint" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: x, y, z, m - Creates a 2D,3DZ or 4D point geometry.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_makepoint]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makepointm" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: x, y, m - Creates a point geometry with an x y and m coordinate.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_makepoint3dm]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makepolygon" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: outerlinestring, interiorlinestrings - Creates a Polygon formed by the given shell. Input geometries must be closed LINESTRINGS.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_makepoly]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makevalid" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: input - Attempts to make an invalid geometry valid without losing vertices.]]></comment>
         <definition language="C"><![CDATA[ST_MakeValid]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebra" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._ST_MapAlgebra(ARRAY[ROW($1, $2), ROW($3, $4)]::rastbandarg[], $5, $6, $9, $10, $7, $8,NULL::double precision [],NULL::boolean, VARIADIC $11) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebraexpr" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_mapAlgebra2]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebrafct" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public.ST_mapalgebrafct($1, 1, NULL, $2, VARIADIC $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebrafctngb" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_mapAlgebraFctNgb]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_max4ma" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		_value double precision[][][];
		max double precision;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		max := '-Infinity'::double precision;

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;

					IF _value[z][y][x] > max THEN
						max := _value[z][y][x];
					END IF;
				END LOOP;
			END LOOP;
		END LOOP;

		IF max = '-Infinity'::double precision THEN
			RETURN NULL;
		END IF;

		RETURN max;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_maxdistance" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - Returns the 2-dimensional largest distance between two geometries in projected units.]]></comment>
         <definition language="SQL"><![CDATA[SELECT public._ST_MaxDistance(public.ST_ConvexHull($1), public.ST_ConvexHull($2))]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mean4ma" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		_value double precision[][][];
		sum double precision;
		count int;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		sum := 0;
		count := 0;

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;

					sum := sum + _value[z][y][x];
					count := count + 1;
				END LOOP;
			END LOOP;
		END LOOP;

		IF count < 1 THEN
			RETURN NULL;
		END IF;

		RETURN sum / count::double precision;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mem_size" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._postgis_deprecate('ST_Mem_Size', 'ST_MemSize', '2.2.0');
    SELECT public.ST_MemSize($1);
  ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_memcollect" returnType="geometry" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="INTERNAL"><![CDATA[aggregate_dummy]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_memsize" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the amount of space (in bytes) the raster takes.]]></comment>
         <definition language="C"><![CDATA[RASTER_memsize]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_memunion" returnType="geometry" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: geomfield - Same as ST_Union, only memory-friendly (uses less memory and more processor time).]]></comment>
         <definition language="INTERNAL"><![CDATA[aggregate_dummy]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_metadata" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns basic meta data about a raster object such as pixel size, rotation (skew), upper, lower left, etc.]]></comment>
         <definition language="C"><![CDATA[RASTER_metadata]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_min4ma" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		_value double precision[][][];
		min double precision;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		min := 'Infinity'::double precision;

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;

					IF _value[z][y][x] < min THEN
						min := _value[z][y][x];
					END IF;
				END LOOP;
			END LOOP;
		END LOOP;

		IF min = 'Infinity'::double precision THEN
			RETURN NULL;
		END IF;

		RETURN min;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_minconvexhull" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_convex_hull]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mindist4ma" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		_value double precision[][][];
		ndims int;

		d double precision DEFAULT NULL;
		_d double precision;

		z integer;
		x integer;
		y integer;

		cx integer;
		cy integer;
		cv double precision;

		w integer;
		h integer;
		max_dx double precision;
		max_dy double precision;
	BEGIN

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);

		-- width and height (0-based)
		h := array_upper(_value, 2) - array_lower(_value, 2);
		w := array_upper(_value, 3) - array_lower(_value, 3);

		-- max distance from center pixel
		max_dx := w / 2;
		max_dy := h / 2;

		-- correct width and height (1-based)
		w := w + 1;
		h := h + 1;

		-- width and height should be odd numbers
		IF w % 2. != 1 THEN
			RAISE EXCEPTION 'Width of neighborhood array does not permit for a center pixel';
		END IF;
		IF h % 2. != 1 THEN
			RAISE EXCEPTION 'Height of neighborhood array does not permit for a center pixel';
		END IF;

		-- center pixel's coordinates
		cy := max_dy + array_lower(_value, 2);
		cx := max_dx + array_lower(_value, 3);

		-- center pixel value
		cv := _value[z][cy][cx];

		-- check to see if center pixel has value
		IF cv IS NOT NULL THEN
			RETURN 0.;
		END IF;

		FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
			FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP

				-- skip NODATA values and center pixel
				IF _value[z][y][x] IS NULL OR (x = cx AND y = cy) THEN
					CONTINUE;
				END IF;

				-- use pythagorean theorem
				_d := sqrt(power(cx - x, 2) + power(cy - y, 2));
--				RAISE NOTICE 'distance = %', _d;

				IF d IS NULL OR _d < d THEN
					d := _d;
				END IF;
			END LOOP;
		END LOOP;
--		RAISE NOTICE 'd = %', d;

		RETURN d;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_minimumboundingcircle" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, num_segs_per_qt_circ=48 - Returns the smallest circle polygon that can fully contain a geometry. Default uses 48 segments per quarter circle.]]></comment>
         <definition language="C"><![CDATA[ST_MinimumBoundingCircle]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_minimumboundingradius" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Returns the center point and radius of the smallest circle that can fully contain a geometry.]]></comment>
         <definition language="C"><![CDATA[ST_MinimumBoundingRadius]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_minimumclearance" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g - Returns the minimum clearance of a geometry, a measure of a geometrys robustness.]]></comment>
         <definition language="C"><![CDATA[ST_MinimumClearance]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_minimumclearanceline" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g - Returns the two-point LineString spanning a geometrys minimum clearance.]]></comment>
         <definition language="C"><![CDATA[ST_MinimumClearanceLine]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_minpossiblevalue" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_minPossibleValue]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mlinefromtext" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT - Return a specified ST_MultiLineString value from WKT representation.]]></comment>
         <definition language="SQL"><![CDATA[
	SELECT CASE
	WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'MULTILINESTRING'
	THEN public.ST_GeomFromText($1,$2)
	ELSE NULL END
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mlinefromwkb" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'MULTILINESTRING'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mpointfromtext" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT - Makes a Geometry from WKT with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
         <definition language="SQL"><![CDATA[
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'MULTIPOINT'
	THEN ST_GeomFromText($1, $2)
	ELSE NULL END
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mpointfromwkb" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'MULTIPOINT'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mpolyfromtext" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT - Makes a MultiPolygon Geometry from WKT with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
         <definition language="SQL"><![CDATA[
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'MULTIPOLYGON'
	THEN public.ST_GeomFromText($1,$2)
	ELSE NULL END
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mpolyfromwkb" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multi" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Return the geometry as a MULTI* geometry.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_force_multi]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multilinefromwkb" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multilinestringfromtext" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[SELECT public.ST_MLineFromText($1)]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multipointfromtext" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[SELECT public.ST_MPointFromText($1)]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multipointfromwkb" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1,$2)) = 'MULTIPOINT'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multipolyfromwkb" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multipolygonfromtext" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[SELECT public.ST_MPolyFromText($1, $2)]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_ndims" returnType="smallint" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Returns coordinate dimension of the geometry as a small int. Values are: 2,3 or 4.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_ndims]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_nearestvalue" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, columnx, rowy, exclude_nodata_value=true - Returns the nearest non-NODATA value of a given bands pixel specified by a columnx and rowy or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
         <definition language="C"><![CDATA[RASTER_nearestValue]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_neighborhood" returnType="ARRAY" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, pt, distanceX, distanceY, exclude_nodata_value=true - Returns a 2-D double precision array of the non-NODATA values around a given bands pixel specified by either a columnX and rowY or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT public._ST_neighborhood($1, $2, $3, $4, $5, $6, $7) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_node" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Node a set of linestrings.]]></comment>
         <definition language="C"><![CDATA[ST_Node]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_normalize" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Return the geometry in its canonical form.]]></comment>
         <definition language="C"><![CDATA[ST_Normalize]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_notsamealignmentreason" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, rastB - Returns text stating if rasters are aligned and if not aligned, a reason why.]]></comment>
         <definition language="C"><![CDATA[RASTER_notSameAlignmentReason]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_npoints" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Return the number of points (vertexes) in a geometry.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_npoints]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_nrings" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - If the geometry is a polygon or multi-polygon returns the number of rings.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_nrings]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_numbands" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the number of bands in the raster object.]]></comment>
         <definition language="C"><![CDATA[RASTER_getNumBands]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_numgeometries" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - If geometry is a GEOMETRYCOLLECTION (or MULTI*) return the number of geometries, for single geometries will return 1, otherwise return NULL.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_numgeometries_collection]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_numinteriorring" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_polygon - Return the number of interior rings of a polygon in the geometry. Synonym for ST_NumInteriorRings.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_numinteriorrings_polygon]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_numinteriorrings" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_polygon - Return the number of interior rings of a polygon geometry.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_numinteriorrings_polygon]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_numpatches" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Return the number of faces on a Polyhedral Surface. Will return null for non-polyhedral geometries.]]></comment>
         <definition language="SQL"><![CDATA[
	SELECT CASE WHEN public.ST_GeometryType($1) = 'ST_PolyhedralSurface'
	THEN public.ST_NumGeometries($1)
	ELSE NULL END
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_numpoints" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Return the number of points in an ST_LineString or ST_CircularString value.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_numpoints_linestring]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_offsetcurve" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: line, signed_distance, style_parameters=' - Return an offset line at a given distance and side from an input line. Useful for computing parallel lines about a center line]]></comment>
         <definition language="C"><![CDATA[ST_OffsetCurve]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_orderingequals" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: A, B - Returns true if the given geometries represent the same geometry and points are in the same directional order.]]></comment>
         <definition language="SQL"><![CDATA[
	SELECT $1 OPERATOR(public.~=) $2 AND public._ST_OrderingEquals($1, $2)
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_overlaps" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, rastB - Return true if raster rastA and rastB intersect but one does not completely contain the other.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_overlaps(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._ST_overlaps($1, $2, $3, $4) END ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_patchn" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, n - Return the 1-based Nth geometry (face) if the geometry is a POLYHEDRALSURFACE, POLYHEDRALSURFACEM. Otherwise, return NULL.]]></comment>
         <definition language="SQL"><![CDATA[
	SELECT CASE WHEN public.ST_GeometryType($1) = 'ST_PolyhedralSurface'
	THEN public.ST_GeometryN($1, $2)
	ELSE NULL END
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_perimeter" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geog, use_spheroid=true - Return the length measurement of the boundary of an ST_Surface or ST_MultiSurface geometry or geography. (Polygon, MultiPolygon). geometry measurement is in units of spatial reference and geography is in meters.]]></comment>
         <definition language="C"><![CDATA[geography_perimeter]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_perimeter2d" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Returns the 2-dimensional perimeter of the geometry, if it is a polygon or multi-polygon. This is currently an alias for ST_Perimeter.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_perimeter2d_poly]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pixelascentroid" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, x, y - Returns the centroid (point geometry) of the area represented by a pixel.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT public.ST_Centroid(geom) FROM public._ST_pixelaspolygons($1, NULL, $2, $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pixelascentroids" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, band=1, exclude_nodata_value=TRUE - Returns the centroid (point geometry) for each pixel of a raster band along with the value, the X and the Y raster coordinates of each pixel. The point geometry is the centroid of the area represented by a pixel.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT public.ST_Centroid(geom), val, x, y FROM public._ST_pixelaspolygons($1, $2, NULL, NULL, $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pixelaspoint" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, columnx, rowy - Returns a point geometry of the pixels upper-left corner.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT ST_PointN(ST_ExteriorRing(geom), 1) FROM public._ST_pixelaspolygons($1, NULL, $2, $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pixelaspoints" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, band=1, exclude_nodata_value=TRUE - Returns a point geometry for each pixel of a raster band along with the value, the X and the Y raster coordinates of each pixel. The coordinates of the point geometry are of the pixels upper-left corner.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT public.ST_PointN(  public.ST_ExteriorRing(geom), 1), val, x, y FROM public._ST_pixelaspolygons($1, $2, NULL, NULL, $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pixelaspolygon" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, columnx, rowy - Returns the polygon geometry that bounds the pixel for a particular row and column.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT geom FROM public._ST_pixelaspolygons($1, NULL, $2, $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pixelaspolygons" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, band=1, exclude_nodata_value=TRUE - Returns the polygon geometry that bounds every pixel of a raster band along with the value, the X and the Y raster coordinates of each pixel.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT geom, val, x, y FROM public._ST_pixelaspolygons($1, $2, NULL, NULL, $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pixelheight" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the pixel height in geometric units of the spatial reference system.]]></comment>
         <definition language="C"><![CDATA[RASTER_getPixelHeight]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pixelofvalue" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, search, exclude_nodata_value=true - Get the columnx, rowy coordinates of the pixel whose value equals the search value.]]></comment>
         <definition language="C"><![CDATA[RASTER_pixelOfValue]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pixelwidth" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the pixel width in geometric units of the spatial reference system.]]></comment>
         <definition language="C"><![CDATA[RASTER_getPixelWidth]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_point" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: x_lon, y_lat - Returns an ST_Point with the given coordinate values. OGC alias for ST_MakePoint.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_makepoint]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_point_inside_circle" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._postgis_deprecate('ST_Point_Inside_Circle', 'ST_PointInsideCircle', '2.2.0');
    SELECT public.ST_PointInsideCircle($1,$2,$3,$4);
  ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointfromgeohash" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geohash, precision=full_precision_of_geohash - Return a point from a GeoHash string.]]></comment>
         <definition language="C"><![CDATA[point_from_geohash]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointfromtext" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT, srid - Makes a point Geometry from WKT with the given SRID. If SRID is not given, it defaults to unknown.]]></comment>
         <definition language="SQL"><![CDATA[
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'POINT'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointfromwkb" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'POINT'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointinsidecircle" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_point, center_x, center_y, radius - Is the point geometry inside the circle defined by center_x, center_y, radius]]></comment>
         <definition language="C"><![CDATA[LWGEOM_inside_circle_point]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointn" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_linestring, n - Return the Nth point in the first LineString or circular LineString in the geometry. Negative values are counted backwards from the end of the LineString. Returns NULL if there is no linestring in the geometry.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_pointn_linestring]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointonsurface" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Returns a POINT guaranteed to lie on the surface.]]></comment>
         <definition language="C"><![CDATA[pointonsurface]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_points" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Returns a MultiPoint containing all of the coordinates of a geometry.]]></comment>
         <definition language="C"><![CDATA[ST_Points]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polyfromtext" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'POLYGON'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polyfromwkb" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'POLYGON'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polygon" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_getPolygon]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polygonfromtext" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT, srid - Makes a Geometry from WKT with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
         <definition language="SQL"><![CDATA[SELECT public.ST_PolyFromText($1, $2)]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polygonfromwkb" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1,$2)) = 'POLYGON'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polygonize" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom_array - Aggregate. Creates a GeometryCollection containing possible polygons formed from the constituent linework of a set of geometries.]]></comment>
         <definition language="INTERNAL"><![CDATA[aggregate_dummy]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_project" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, distance, azimuth - Returns a POINT projected from a start point using a distance in meters and bearing (azimuth) in radians.]]></comment>
         <definition language="C"><![CDATA[geography_project]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_quantile" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._ST_quantile($1, $2, $3, $4, 1, $5) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_range4ma" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		_value double precision[][][];
		min double precision;
		max double precision;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		min := 'Infinity'::double precision;
		max := '-Infinity'::double precision;

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;

					IF _value[z][y][x] < min THEN
						min := _value[z][y][x];
					END IF;
					IF _value[z][y][x] > max THEN
						max := _value[z][y][x];
					END IF;
				END LOOP;
			END LOOP;
		END LOOP;

		IF max = '-Infinity'::double precision OR min = 'Infinity'::double precision THEN
			RETURN NULL;
		END IF;

		RETURN max - min;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rastertoworldcoord" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, xcolumn, yrow - Returns the rasters upper left corner as geometric X and Y (longitude and latitude) given a column and row. Column and row starts at 1.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT longitude, latitude FROM public._ST_rastertoworldcoord($1, $2, $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rastertoworldcoordx" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, xcolumn, yrow - Returns the geometric X coordinate upper left of a raster, column and row. Numbering of columns and rows starts at 1.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT longitude FROM public._ST_rastertoworldcoord($1, $2, $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rastertoworldcoordy" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, xcolumn, yrow - Returns the geometric Y coordinate upper left corner of a raster, column and row. Numbering of columns and rows starts at 1.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT latitude FROM public._ST_rastertoworldcoord($1, $2, $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_reclass" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		i int;
		expr text;
	BEGIN
		-- for each reclassarg, validate elements as all except nodataval cannot be NULL
		FOR i IN SELECT * FROM generate_subscripts($2, 1) LOOP
			IF $2[i].nband IS NULL OR $2[i].reclassexpr IS NULL OR $2[i].pixeltype IS NULL THEN
				RAISE WARNING 'Values are required for the nband, reclassexpr and pixeltype attributes.';
				RETURN rast;
			END IF;
		END LOOP;

		RETURN public._ST_reclass($1, VARIADIC $2);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_relate" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, geomB, BoundaryNodeRule - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.]]></comment>
         <definition language="C"><![CDATA[relate_full]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_relatematch" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: intersectionMatrix, intersectionMatrixPattern - Returns true if intersectionMattrixPattern1 implies intersectionMatrixPattern2]]></comment>
         <definition language="C"><![CDATA[ST_RelateMatch]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_removepoint" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: linestring, offset - Remove point from a linestring.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_removepoint]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_removerepeatedpoints" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, tolerance - Returns a version of the given geometry with duplicated points removed.]]></comment>
         <definition language="C"><![CDATA[ST_RemoveRepeatedPoints]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_resample" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, ref, usescale, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT public._ST_gdalwarp($1, $8,	$9, NULL, $2, $3, $4, $5, $6, $7) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rescale" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, scalex, scaley, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its scale (or pixel size). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT  public._ST_GdalWarp($1, $4, $5, NULL, $2, $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_resize" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, width, height, algorithm=NearestNeighbor, maxerr=0.125 - Resize a raster to a new width/height]]></comment>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		i integer;

		wh text[2];

		whi integer[2];
		whd double precision[2];

		_width integer;
		_height integer;
	BEGIN
		wh[1] := trim(both from $2);
		wh[2] := trim(both from $3);

		-- see if width and height are percentages
		FOR i IN 1..2 LOOP
			IF position('%' in wh[i]) > 0 THEN
				BEGIN
					wh[i] := (regexp_matches(wh[i], E'^(\\d*.?\\d*)%{1}$'))[1];
					IF length(wh[i]) < 1 THEN
						RAISE invalid_parameter_value;
					END IF;

					whd[i] := wh[i]::double precision * 0.01;
				EXCEPTION WHEN OTHERS THEN -- TODO: WHEN invalid_parameter_value !
					RAISE EXCEPTION 'Invalid percentage value provided for width/height';
					RETURN NULL;
				END;
			ELSE
				BEGIN
					whi[i] := abs(wh[i]::integer);
				EXCEPTION WHEN OTHERS THEN -- TODO: only handle appropriate SQLSTATE
					RAISE EXCEPTION 'Non-integer value provided for width/height';
					RETURN NULL;
				END;
			END IF;
		END LOOP;

		IF whd[1] IS NOT NULL OR whd[2] IS NOT NULL THEN
			SELECT foo.width, foo.height INTO _width, _height FROM public.ST_Metadata($1) AS foo;

			IF whd[1] IS NOT NULL THEN
				whi[1] := round(_width::double precision * whd[1])::integer;
			END IF;

			IF whd[2] IS NOT NULL THEN
				whi[2] := round(_height::double precision * whd[2])::integer;
			END IF;

		END IF;

		-- should NEVER be here
		IF whi[1] IS NULL OR whi[2] IS NULL THEN
			RAISE EXCEPTION 'Unable to determine appropriate width or height';
			RETURN NULL;
		END IF;

		FOR i IN 1..2 LOOP
			IF whi[i] < 1 THEN
				whi[i] = 1;
			END IF;
		END LOOP;

		RETURN public._ST_gdalwarp(
			$1,
			$4, $5,
			NULL,
			NULL, NULL,
			NULL, NULL,
			NULL, NULL,
			whi[1], whi[2]
		);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_reskew" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, skewx, skewy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its skew (or rotation parameters). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT public._ST_GdalWarp($1, $4, $5, NULL, 0, 0, NULL, NULL, $2, $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_retile" returnType="SETOF raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: tab, col, ext, sfx, sfy, tw, th, algo='NearestNeighbor' - Return a set of configured tiles from an arbitrarily tiled raster coverage.]]></comment>
         <definition language="PLPGSQL"><![CDATA[
DECLARE
  rec RECORD;
  ipx FLOAT8;
  ipy FLOAT8;
  tx int;
  ty int;
  te GEOMETRY; -- tile extent
  ncols int;
  nlins int;
  srid int;
  sql TEXT;
BEGIN

  RAISE DEBUG 'Target coverage will have sfx=%, sfy=%', sfx, sfy;

  -- 2. Loop over each target tile and build it from source tiles
  ipx := st_xmin(ext);
  ncols := ceil((st_xmax(ext)-ipx)/sfx/tw);
  IF sfy < 0 THEN
    ipy := st_ymax(ext);
    nlins := ceil((st_ymin(ext)-ipy)/sfy/th);
  ELSE
    ipy := st_ymin(ext);
    nlins := ceil((st_ymax(ext)-ipy)/sfy/th);
  END IF;

  srid := ST_Srid(ext);

  RAISE DEBUG 'Target coverage will have % x % tiles, each of approx size % x %', ncols, nlins, tw, th;
  RAISE DEBUG 'Target coverage will cover extent %', ext::box2d;

  FOR tx IN 0..ncols-1 LOOP
    FOR ty IN 0..nlins-1 LOOP
      te := ST_MakeEnvelope(ipx + tx     *  tw  * sfx,
                             ipy + ty     *  th  * sfy,
                             ipx + (tx+1) *  tw  * sfx,
                             ipy + (ty+1) *  th  * sfy,
                             srid);
      --RAISE DEBUG 'sfx/sfy: %, %', sfx, sfy;
      --RAISE DEBUG 'tile extent %', te;
      sql := 'SELECT count(*),  public.ST_Clip(  public.ST_Union(  public.ST_SnapToGrid(  public.ST_Rescale(  public.ST_Clip(' || quote_ident(col)
          || ',  public.ST_Expand($3, greatest($1,$2))),$1, $2, $6), $4, $5, $1, $2)), $3) g FROM ' || tab::text
          || ' WHERE  public.ST_Intersects(' || quote_ident(col) || ', $3)';
      --RAISE DEBUG 'SQL: %', sql;
      FOR rec IN EXECUTE sql USING sfx, sfy, te, ipx, ipy, algo LOOP
        --RAISE DEBUG '% source tiles intersect target tile %,% with extent %', rec.count, tx, ty, te::box2d;
        IF rec.g IS NULL THEN
          RAISE WARNING 'No source tiles cover target tile %,% with extent %',
            tx, ty, te::box2d;
        ELSE
          --RAISE DEBUG 'Tile for extent % has size % x %', te::box2d, st_width(rec.g), st_height(rec.g);
          RETURN NEXT rec.g;
        END IF;
      END LOOP;
    END LOOP;
  END LOOP;

  RETURN;
END;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_reverse" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Return the geometry with vertex order reversed.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_reverse]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rotate" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, rotRadians, pointOrigin - Rotate a geometry rotRadians counter-clockwise about an origin.]]></comment>
         <definition language="SQL"><![CDATA[SELECT public.ST_Affine($1,  cos($2), -sin($2), 0,  sin($2), cos($2), 0,  0, 0, 1,  0, 0, 0)]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rotatex" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, rotRadians - Rotate a geometry rotRadians about the X axis.]]></comment>
         <definition language="SQL"><![CDATA[SELECT public.ST_Affine($1, 1, 0, 0, 0, cos($2), -sin($2), 0, sin($2), cos($2), 0, 0, 0)]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rotatey" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, rotRadians - Rotate a geometry rotRadians about the Y axis.]]></comment>
         <definition language="SQL"><![CDATA[SELECT public.ST_Affine($1,  cos($2), 0, sin($2),  0, 1, 0,  -sin($2), 0, cos($2), 0,  0, 0)]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rotatez" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, rotRadians - Rotate a geometry rotRadians about the Z axis.]]></comment>
         <definition language="SQL"><![CDATA[SELECT public.ST_Rotate($1, $2)]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_rotation" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the rotation of the raster in radian.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT ( public.ST_Geotransform($1)).theta_i ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_roughness" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;

		IF interpolate_nodata IS TRUE THEN
			_rast := public.ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;

		RETURN public.ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			' public._ST_roughness4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_samealignment" returnType="boolean" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: rastfield - Returns true if rasters have same skew, scale, spatial ref, and offset (pixels can be put on same grid without cutting into pixels) and false if they dont with notice detailing issue.]]></comment>
         <definition language="C"><![CDATA[RASTER_sameAlignment]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_scale" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, factor - Scale a geometry by given factors.]]></comment>
         <definition language="C"><![CDATA[ST_Scale]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_scalex" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the X component of the pixel width in units of coordinate reference system.]]></comment>
         <definition language="C"><![CDATA[RASTER_getXScale]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_scaley" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the Y component of the pixel height in units of coordinate reference system.]]></comment>
         <definition language="C"><![CDATA[RASTER_getYScale]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_segmentize" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geog, max_segment_length - Return a modified geometry/geography having no segment longer than the given distance.]]></comment>
         <definition language="C"><![CDATA[geography_segmentize]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setbandisnodata" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, band=1 - Sets the isnodata flag of the band to TRUE.]]></comment>
         <definition language="C"><![CDATA[RASTER_setBandIsNoData]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setbandnodatavalue" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, band, nodatavalue, forcechecking=false - Sets the value for the given band that represents no data. Band 1 is assumed if no band is specified. To mark a band as having no nodata value, set the nodata value = NULL.]]></comment>
         <definition language="C"><![CDATA[RASTER_setBandNoDataValue]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_seteffectivearea" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, threshold = 0, set_area = 1 - Sets the effective area for each vertex, storing the value in the M ordinate. A simplified geometry can then be generated by filtering on the M ordinate.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_SetEffectiveArea]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setgeoreference" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, upperleftx, upperlefty, scalex, scaley, skewx, skewy - Set Georeference 6 georeference parameters in a single call. Numbers should be separated by white space. Accepts inputs in GDAL or ESRI format. Default is GDAL.]]></comment>
         <definition language="PLPGSQL"><![CDATA[
    DECLARE
        params text[];
        rastout raster;
    BEGIN
        IF rast IS NULL THEN
            RAISE WARNING 'Cannot set georeferencing on a null raster in st_setgeoreference.';
            RETURN rastout;
        END IF;

        SELECT regexp_matches(georef,
            E'(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)\\s' ||
            E'(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)') INTO params;

        IF NOT FOUND THEN
            RAISE EXCEPTION 'st_setgeoreference requires a string with 6 floating point values.';
        END IF;

        IF format = 'ESRI' THEN
            -- params array is now:
            -- {scalex, skewy, skewx, scaley, upperleftx, upperlefty}
            rastout := public.ST_setscale(rast, params[1]::float8, params[4]::float8);
            rastout := public.ST_setskew(rastout, params[3]::float8, params[2]::float8);
            rastout := public.ST_setupperleft(rastout,
                                   params[5]::float8 - (params[1]::float8 * 0.5),
                                   params[6]::float8 - (params[4]::float8 * 0.5));
        ELSE
            IF format != 'GDAL' THEN
                RAISE WARNING 'Format ''%'' is not recognized, defaulting to GDAL format.', format;
            END IF;
            -- params array is now:
            -- {scalex, skewy, skewx, scaley, upperleftx, upperlefty}

            rastout := public.ST_setscale(rast, params[1]::float8, params[4]::float8);
            rastout := public.ST_setskew( rastout, params[3]::float8, params[2]::float8);
            rastout := public.ST_setupperleft(rastout, params[5]::float8, params[6]::float8);
        END IF;
        RETURN rastout;
    END;
    ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setgeotransform" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_setGeotransform]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setpoint" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: linestring, zerobasedposition, point - Replace point of a linestring with a given point.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_setpoint_linestring]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setrotation" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, rotation - Set the rotation of the raster in radian.]]></comment>
         <definition language="C"><![CDATA[RASTER_setRotation]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setscale" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, x, y - Sets the X and Y size of pixels in units of coordinate reference system. Number units/pixel width/height.]]></comment>
         <definition language="C"><![CDATA[RASTER_setScale]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setskew" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, skewx, skewy - Sets the georeference X and Y skew (or rotation parameter). If only one is passed in, sets X and Y to the same value.]]></comment>
         <definition language="C"><![CDATA[RASTER_setSkew]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setsrid" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[RASTER_setSRID]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setupperleft" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, x, y - Sets the value of the upper left corner of the pixel of the raster to projected X and Y coordinates.]]></comment>
         <definition language="C"><![CDATA[RASTER_setUpperLeftXY]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_setvalue" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, columnx, rowy, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or the pixels that intersect a particular geometry. Band numbers start at 1 and assumed to be 1 if not specified.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT public.ST_SetValue($1, 1, $2, $3, $4) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setvalues" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, geomvalset, keepnodata=FALSE - Returns modified raster resulting from setting the values of a given band.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT public._ST_setvalues($1, $2, $3, $4, $5, $6, FALSE, NULL, $7) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_sharedpaths" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: lineal1, lineal2 - Returns a collection containing paths shared by the two input linestrings/multilinestrings.]]></comment>
         <definition language="C"><![CDATA[ST_SharedPaths]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_shift_longitude" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._postgis_deprecate('ST_Shift_Longitude', 'ST_ShiftLongitude', '2.2.0');
    SELECT public.ST_ShiftLongitude($1);
  ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_shiftlongitude" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Toggle geometry coordinates between -180..180 and 0..360 ranges.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_longitude_shift]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_shortestline" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - Returns the 2-dimensional shortest line between two geometries]]></comment>
         <definition language="C"><![CDATA[LWGEOM_shortestline2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_simplify" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOM_simplify2d]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_simplifypreservetopology" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, tolerance - Returns a "simplified" version of the given geometry using the Douglas-Peucker algorithm. Will avoid creating derived geometries (polygons in particular) that are invalid.]]></comment>
         <definition language="C"><![CDATA[topologypreservesimplify]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_simplifyvw" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, tolerance - Returns a "simplified" version of the given geometry using the Visvalingam-Whyatt algorithm]]></comment>
         <definition language="C"><![CDATA[LWGEOM_SetEffectiveArea]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_skewx" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the georeference X skew (or rotation parameter).]]></comment>
         <definition language="C"><![CDATA[RASTER_getXSkew]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_skewy" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the georeference Y skew (or rotation parameter).]]></comment>
         <definition language="C"><![CDATA[RASTER_getYSkew]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_slope" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;

		IF interpolate_nodata IS TRUE THEN
			_rast := public.ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;

		-- get properties
		_pixwidth := public.ST_PixelWidth(_rast);
		_pixheight := public.ST_PixelHeight(_rast);
		SELECT width, height INTO _width, _height FROM public.ST_Metadata(_rast);

		RETURN public.ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			' public._ST_slope4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1,
			_pixwidth::text, _pixheight::text,
			_width::text, _height::text,
			units::text, scale::text
		);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_snap" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: input, reference, tolerance - Snap segments and vertices of input geometry to vertices of a reference geometry.]]></comment>
         <definition language="C"><![CDATA[ST_Snap]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_snaptogrid" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, gridx, gridy, scalexy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by snapping it to a grid. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT public._ST_GdalWarp($1, $4, $5, NULL, $6, $7, $2, $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_split" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: input, blade - Returns a collection of geometries resulting by splitting a geometry.]]></comment>
         <definition language="C"><![CDATA[ST_Split]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_srid" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOM_get_srid]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_startpoint" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Returns the first point of a LINESTRING geometry as a POINT.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_startpoint_linestring]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_stddev4ma" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT stddev(unnest) FROM unnest($1) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_subdivide" returnType="SETOF geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, max_vertices=256 - Returns a set of geometry where no geometry in the set has more than the specified number of vertices.]]></comment>
         <definition language="C"><![CDATA[ST_Subdivide]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_sum4ma" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		_value double precision[][][];
		sum double precision;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		sum := 0;

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;

					sum := sum + _value[z][y][x];
				END LOOP;
			END LOOP;
		END LOOP;

		RETURN sum;
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_summary" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns a text summary of the contents of the raster.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_summary]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_summarystats" returnType="summarystats" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true - Returns summarystats consisting of count, sum, mean, stddev, min, max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT public._ST_summarystats($1, $2, $3, 1) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_summarystatsagg" returnType="summarystats" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: rast, nband, exclude_nodata_value - Aggregate. Returns summarystats consisting of count, sum, mean, stddev, min, max for a given raster band of a set of raster. Band 1 is assumed is no band is specified.]]></comment>
         <definition language="INTERNAL"><![CDATA[aggregate_dummy]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_swapordinates" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, ords - Returns a version of the given geometry with given ordinate values swapped.]]></comment>
         <definition language="C"><![CDATA[ST_SwapOrdinates]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_symdifference" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, geomB - Returns a geometry that represents the portions of A and B that do not intersect. It is called a symmetric difference because ST_SymDifference(A,B) = ST_SymDifference(B,A).]]></comment>
         <definition language="C"><![CDATA[symdifference]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_symmetricdifference" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[symdifference]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_tile" returnType="SETOF raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, width, height, padwithnodata=FALSE, nodataval=NULL - Returns a set of rasters resulting from the split of the input raster based upon the desired dimensions of the output rasters.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT public._ST_tile($1, $3, $4, $2, $5, $6) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_touches" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, rastB - Return true if raster rastA and rastB have at least one point in common but their interiors do not intersect.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_touches(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._st_touches($1, $2, $3, $4) END ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_tpi" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;

		IF interpolate_nodata IS TRUE THEN
			_rast := public.ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;

		-- get properties
		_pixwidth := public.ST_PixelWidth(_rast);
		_pixheight := public.ST_PixelHeight(_rast);
		SELECT width, height INTO _width, _height FROM public.ST_Metadata(_rast);

		RETURN public.ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			' public._ST_tpi4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_transform" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT public._ST_gdalwarp($1, $5, $6, $2, $3, $4) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_translate" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, deltax, deltay, deltaz - Translate a geometry by given offsets.]]></comment>
         <definition language="SQL"><![CDATA[SELECT public.ST_Affine($1, 1, 0, 0, 0, 1, 0, 0, 0, 1, $2, $3, $4)]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_transscale" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, deltaX, deltaY, XFactor, YFactor - Translate a geometry by given factors and offsets.]]></comment>
         <definition language="SQL"><![CDATA[SELECT public.ST_Affine($1,  $4, 0, 0,  0, $5, 0,
		0, 0, 1,  $2 * $4, $3 * $5, 0)]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_tri" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="PLPGSQL"><![CDATA[
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;

		IF interpolate_nodata IS TRUE THEN
			_rast := public.ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;

		-- get properties
		_pixwidth := public.ST_PixelWidth(_rast);
		_pixheight := public.ST_PixelHeight(_rast);
		SELECT width, height INTO _width, _height FROM public.ST_Metadata(_rast);

		RETURN public.ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			' public._ST_tri4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1);
	END;
	]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_unaryunion" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Like ST_Union, but working at the geometry component level.]]></comment>
         <definition language="C"><![CDATA[ST_UnaryUnion]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_union" returnType="raster" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="INTERNAL"><![CDATA[aggregate_dummy]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_upperleftx" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the upper left X coordinate of raster in projected spatial ref.]]></comment>
         <definition language="C"><![CDATA[RASTER_getXUpperLeft]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_upperlefty" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the upper left Y coordinate of raster in projected spatial ref.]]></comment>
         <definition language="C"><![CDATA[RASTER_getYUpperLeft]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_value" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, band, x, y, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.]]></comment>
         <definition language="C"><![CDATA[RASTER_getPixelValue]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_valuecount" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastertable, rastercolumn, nband, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT ( public._ST_valuecount($1, $2, $3, TRUE, ARRAY[$4]::double precision[], $5)).count ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_valuepercent" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[ SELECT value, percent FROM public._ST_valuecount($1, $2, $3, $4, $5, $6) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_voronoilines" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, tolerance, extend_to - Returns the boundaries between the cells of the Voronoi diagram constructed from the vertices of a geometry.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT public._ST_Voronoi(g1, extend_to, tolerance, false) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_voronoipolygons" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, tolerance, extend_to - Returns the cells of the Voronoi diagram constructed from the vertices of a geometry.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT public._ST_Voronoi(g1, extend_to, tolerance, true) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_width" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the width of the raster in pixels.]]></comment>
         <definition language="C"><![CDATA[RASTER_getWidth]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_within" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, rastB - Return true if no points of raster rastA lie in the exterior of raster rastB and at least one point of the interior of rastA lies in the interior of rastB.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_within(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._st_contains($3, $4, $1, $2) END ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_wkbtosql" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKB - Return a specified ST_Geometry value from Well-Known Binary representation (WKB). This is an alias name for ST_GeomFromWKB that takes no srid]]></comment>
         <definition language="C"><![CDATA[LWGEOM_from_WKB]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_wkttosql" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText]]></comment>
         <definition language="C"><![CDATA[LWGEOM_from_text]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_worldtorastercoord" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, longitude, latitude - Returns the upper left corner as column and row given geometric X and Y (longitude and latitude) or a point geometry expressed in the spatial reference coordinate system of the raster.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT columnx, rowy FROM public._ST_worldtorastercoord($1, $2, $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_worldtorastercoordx" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, xw, yw - Returns the column in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT columnx FROM public._ST_worldtorastercoord($1, $2, $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_worldtorastercoordy" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, xw, yw - Returns the row in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT rowy FROM public._ST_worldtorastercoord($1, $2, $3) ]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_wrapx" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, wrap, move - Wrap a geometry around an X value.]]></comment>
         <definition language="C"><![CDATA[ST_WrapX]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_x" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_point - Return the X coordinate of the point, or NULL if not available. Input must be a point.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_x_point]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_xmax" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: aGeomorBox2DorBox3D - Returns X maxima of a bounding box 2d or 3d or a geometry.]]></comment>
         <definition language="C"><![CDATA[BOX3D_xmax]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_xmin" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: aGeomorBox2DorBox3D - Returns X minima of a bounding box 2d or 3d or a geometry.]]></comment>
         <definition language="C"><![CDATA[BOX3D_xmin]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_y" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_point - Return the Y coordinate of the point, or NULL if not available. Input must be a point.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_y_point]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_ymax" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: aGeomorBox2DorBox3D - Returns Y maxima of a bounding box 2d or 3d or a geometry.]]></comment>
         <definition language="C"><![CDATA[BOX3D_ymax]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_ymin" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: aGeomorBox2DorBox3D - Returns Y minima of a bounding box 2d or 3d or a geometry.]]></comment>
         <definition language="C"><![CDATA[BOX3D_ymin]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_z" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_point - Return the Z coordinate of the point, or NULL if not available. Input must be a point.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_z_point]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_zmax" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: aGeomorBox2DorBox3D - Returns Z minima of a bounding box 2d or 3d or a geometry.]]></comment>
         <definition language="C"><![CDATA[BOX3D_zmax]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_zmflag" returnType="smallint" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Returns ZM (dimension semantic) flag of the geometries as a small int. Values are: 0=2d, 1=3dm, 2=3dz, 3=4d.]]></comment>
         <definition language="C"><![CDATA[LWGEOM_zmflag]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_zmin" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: aGeomorBox2DorBox3D - Returns Z minima of a bounding box 2d or 3d or a geometry.]]></comment>
         <definition language="C"><![CDATA[BOX3D_zmin]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="text" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="C"><![CDATA[LWGEOM_to_text]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="unlockrows" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: auth_token - Remove all locks held by specified authorization id. Returns the number of locks released.]]></comment>
         <definition language="PLPGSQL"><![CDATA[ 
DECLARE
	ret int;
BEGIN

	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	EXECUTE 'DELETE FROM authorization_table where authid = ' ||
		quote_literal($1);

	GET DIAGNOSTICS ret = ROW_COUNT;

	RETURN ret;
END;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="updategeometrysrid" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: catalog_name, schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid. If it was enforced with constraints, the constraints will be updated with new srid constraint. If the old was enforced by type definition, the type definition will be changed.]]></comment>
         <definition language="PLPGSQL"><![CDATA[
DECLARE
	myrec RECORD;
	okay boolean;
	cname varchar;
	real_schema name;
	unknown_srid integer;
	new_srid integer := new_srid_in;

BEGIN


	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = false;

		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := true;
		END LOOP;

		IF ( okay <> true ) THEN
			RAISE EXCEPTION 'Invalid schema name';
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT INTO real_schema current_schema()::text;
	END IF;

	-- Ensure that column_name is in geometry_columns
	okay = false;
	FOR myrec IN SELECT type, coord_dimension FROM public.geometry_columns WHERE f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := true;
	END LOOP;
	IF (NOT okay) THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN false;
	END IF;

	-- Ensure that new_srid is valid
	IF ( new_srid > 0 ) THEN
		IF ( SELECT count(*) = 0 from spatial_ref_sys where srid = new_srid ) THEN
			RAISE EXCEPTION 'invalid SRID: % not found in spatial_ref_sys', new_srid;
			RETURN false;
		END IF;
	ELSE
		unknown_srid := public.ST_SRID('POINT EMPTY'::public.geometry);
		IF ( new_srid != unknown_srid ) THEN
			new_srid := unknown_srid;
			RAISE NOTICE 'SRID value % converted to the officially unknown SRID value %', new_srid_in, new_srid;
		END IF;
	END IF;

	IF postgis_constraint_srid(real_schema, table_name, column_name) IS NOT NULL THEN
	-- srid was enforced with constraints before, keep it that way.
        -- Make up constraint name
        cname = 'enforce_srid_'  || column_name;

        -- Drop enforce_srid constraint
        EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
            '.' || quote_ident(table_name) ||
            ' DROP constraint ' || quote_ident(cname);

        -- Update geometries SRID
        EXECUTE 'UPDATE ' || quote_ident(real_schema) ||
            '.' || quote_ident(table_name) ||
            ' SET ' || quote_ident(column_name) ||
            ' = public.ST_SetSRID(' || quote_ident(column_name) ||
            ', ' || new_srid::text || ')';

        -- Reset enforce_srid constraint
        EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
            '.' || quote_ident(table_name) ||
            ' ADD constraint ' || quote_ident(cname) ||
            ' CHECK (st_srid(' || quote_ident(column_name) ||
            ') = ' || new_srid::text || ')';
    ELSE
        -- We will use typmod to enforce if no srid constraints
        -- We are using postgis_type_name to lookup the new name
        -- (in case Paul changes his mind and flips geometry_columns to return old upper case name)
        EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) || '.' || quote_ident(table_name) ||
        ' ALTER COLUMN ' || quote_ident(column_name) || ' TYPE  geometry(' || public.postgis_type_name(myrec.type, myrec.coord_dimension, true) || ', ' || new_srid::text || ') USING public.ST_SetSRID(' || quote_ident(column_name) || ',' || new_srid::text || ');' ;
    END IF;

	RETURN real_schema || '.' || table_name || '.' || column_name ||' SRID changed to ' || new_srid::text;

END;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="updaterastersrid" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: table_name, column_name, new_srid - Change the SRID of all rasters in the user-specified column and table.]]></comment>
         <definition language="SQL"><![CDATA[ SELECT  public._UpdateRasterSRID($1, $2, $3, $4) ]]></definition>
      </routine>
   </routines>
</database>
